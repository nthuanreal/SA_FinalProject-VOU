var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.338,1,1.871]],["body/controllers/AppController.html",[0,2.032,1,2.842,2,1.433,3,0.538,4,0.538,5,0.404,6,2.951,7,0.538,8,1.498,9,3.774,10,3.584,11,5.328,12,2.222,13,0.039,14,0.86,15,3.584,16,1.171,17,1.171,18,0.88,19,1.171,20,3.573,21,1.171,22,4.585,23,0.971,24,0.688,25,2.49,26,2.951,27,2.951,28,0.538,29,0.282,30,1.973,31,1.973,32,3.584,33,1.295,34,1.973,35,3.584,36,3.584,37,3.584,38,3.584,39,0.03,40,0.03]],["title/modules/AppModule.html",[41,0.986,42,1.871]],["body/modules/AppModule.html",[1,2.844,2,1.61,3,0.442,4,0.442,5,0.332,13,0.04,23,1.082,24,0.566,25,2.626,26,2.425,28,0.442,29,0.232,34,1.622,39,0.026,40,0.026,41,1.499,42,3.595,43,1.306,44,1.306,45,1.622,46,1.622,47,1.306,48,2.525,49,1.622,50,2.425,51,2.425,52,2.425,53,2.934,54,2.362,55,2.626,56,2.217,57,1.622,58,1.622,59,2.946,60,2.496,61,2.946,62,2.425,63,2.946,64,2.946,65,2.946,66,2.946,67,2.946,68,2.425,69,2.425,70,2.425,71,2.425,72,2.946,73,2.946,74,2.425,75,2.946,76,2.946,77,2.946,78,1.622]],["title/injectables/AppService.html",[25,1.487,79,0.724]],["body/injectables/AppService.html",[3,0.495,4,0.495,5,0.547,7,0.495,8,1.419,9,4.249,13,0.04,14,1.042,21,1.419,23,0.933,24,0.633,25,2.14,28,0.495,29,0.26,33,1.192,34,1.816,39,0.028,40,0.028,70,2.716,71,2.716,74,2.716,79,1.042,80,1.625,81,2.716,82,5.162,83,3.299,84,1.865,85,3.299,86,3.299,87,3.299,88,4.344,89,3.299,90,2.332,91,3.299,92,2.716,93,3.299,94,3.299,95,4.344,96,3.299,97,1.57,98,3.299,99,3.299,100,3.299,101,2.332,102,2.045,103,2.045,104,1.625,105,3.299,106,2.716,107,3.299,108,3.299]],["title/controllers/AuthController.html",[0,1.338,109,1.871]],["body/controllers/AuthController.html",[0,1.202,2,1.085,3,0.407,4,0.407,5,0.305,7,0.407,8,1.243,12,2.722,13,0.04,14,1.053,16,1.435,17,1.435,18,0.843,19,1.435,21,1.435,23,0.914,24,0.521,28,0.407,29,0.214,30,1.493,31,1.493,33,1.374,39,0.025,40,0.025,97,1.587,102,1.682,109,2.357,110,2.233,111,2.233,112,1.917,113,2.212,114,3.131,115,2.688,116,2.688,117,2.233,118,2.713,119,2.713,120,3.104,121,2.417,122,2.713,123,3.119,124,3.803,125,2.713,126,2.233,127,3.803,128,2.713,129,1.917,130,2.233,131,2.233,132,2.164,133,2.233,134,1.493,135,1.682,136,2.233,137,1.336,138,2.713,139,2.713,140,2.713,141,2.713,142,2.713,143,2.713,144,2.713,145,2.713,146,0.73,147,2.093,148,2.713,149,3.803,150,2.713,151,2.713,152,2.233,153,2.713,154,2.713,155,2.713,156,2.713]],["title/classes/AuthDTO.html",[29,0.238,123,1.661]],["body/classes/AuthDTO.html",[3,0.621,4,0.621,5,0.466,7,0.621,13,0.037,14,1.202,18,0.963,28,0.621,29,0.326,39,0.032,40,0.032,84,2.026,123,2.759,157,2.924,158,3.406,159,2.759,160,2.157,161,1.949,162,4.137,163,4.137]],["title/modules/AuthModule.html",[41,0.986,53,1.661]],["body/modules/AuthModule.html",[2,1.671,3,0.467,4,0.467,5,0.35,13,0.04,23,1.063,24,0.598,28,0.467,29,0.245,39,0.027,40,0.027,41,1.542,43,1.379,44,1.379,45,1.713,46,1.713,47,1.379,48,2.597,49,1.713,53,3.17,54,2.401,56,2.301,57,1.713,58,1.713,60,2.591,109,2.925,132,2.669,133,2.562,164,2.562,165,2.562,166,3.112,167,2.669,168,3.112,169,2.562,170,1.713,171,4.179,172,2.2,173,3.112,174,3.112,175,2.562,176,1.379,177,2.562,178,2.2,179,1.929,180,2.2,181,2.562,182,2.562,183,2.562]],["title/injectables/AuthService.html",[79,0.724,132,1.487]],["body/injectables/AuthService.html",[3,0.332,4,0.332,5,0.25,7,0.332,8,1.074,13,0.04,14,1.039,16,1.416,17,1.416,18,0.832,19,1.416,21,1.28,23,0.889,24,0.426,28,0.332,29,0.175,31,1.809,33,1.903,39,0.021,40,0.021,79,0.788,80,1.092,97,1.416,103,2.429,104,2.28,113,2.105,115,2.323,116,2.323,121,2.157,123,2.669,126,1.824,132,1.619,137,2.678,146,0.752,147,2.548,160,1.314,161,0.801,170,1.22,184,1.824,185,3.287,186,1.457,187,1.824,188,1.733,189,4.132,190,2.216,191,2.323,192,3.287,193,2.216,194,2.216,195,2.216,196,2.216,197,2.216,198,2.216,199,1.566,200,2.037,201,2.216,202,1.824,203,1.566,204,2.037,205,2.216,206,2.706,207,3.287,208,2.216,209,1.566,210,2.216,211,2.323,212,2.216,213,1.374,214,2.706,215,2.216,216,2.216,217,2.216,218,2.706,219,3.287,220,3.287,221,3.287,222,3.287,223,2.216,224,2.216,225,1.824,226,2.216,227,2.216,228,2.216,229,2.216,230,1.824,231,1.824,232,1.566,233,1.824,234,1.566,235,2.216,236,2.216]],["title/modules/DatabaseModule.html",[41,0.986,54,1.338]],["body/modules/DatabaseModule.html",[2,1.277,3,0.479,4,0.479,5,0.359,13,0.039,18,0.613,23,0.978,24,0.613,28,0.479,29,0.252,39,0.027,40,0.027,41,1.562,43,1.415,44,1.415,45,1.757,46,1.757,47,1.415,48,2.631,49,2.631,54,2.468,56,2.34,57,1.757,58,1.757,60,1.979,78,2.34,146,0.816,160,1.277,161,1.154,176,1.415,188,2.349,213,1.979,237,2.628,238,2.628,239,2.628,240,3.192,241,2.628,242,1.979,243,2.628,244,3.192,245,3.192,246,3.192,247,2.257,248,2.628,249,2.628,250,2.257,251,2.628,252,2.257,253,2.257,254,2.628,255,2.628,256,2.628,257,3.192,258,2.257,259,3.192,260,3.192,261,3.192,262,2.257,263,2.628]],["title/injectables/DatabaseService.html",[79,0.724,188,1.207]],["body/injectables/DatabaseService.html",[3,0.201,4,0.201,5,0.151,7,0.201,8,0.722,13,0.04,14,1.137,16,1.353,17,1.353,18,0.795,19,1.353,20,0.946,21,1.511,23,0.751,24,0.257,28,0.201,29,0.105,33,1.496,39,0.014,40,0.014,78,2.383,79,0.53,80,0.659,84,1.414,90,0.946,92,1.101,97,1.564,101,0.946,102,1.37,104,0.659,113,1.794,146,0.947,147,2.47,160,1.896,161,1.751,176,0.593,186,0.98,188,0.884,200,1.37,204,2.034,209,0.946,211,3.351,213,2.034,214,1.101,242,0.829,243,1.101,247,1.563,248,1.101,249,1.101,250,0.946,251,1.101,252,0.946,253,0.946,254,1.101,255,1.101,256,1.101,262,1.563,264,1.101,265,3.281,266,1.82,267,3.281,268,2.211,269,2.211,270,2.211,271,3.912,272,2.211,273,3.281,274,2.211,275,1.338,276,3.281,277,1.338,278,2.211,279,1.338,280,2.211,281,3.912,282,1.338,283,1.338,284,2.211,285,1.338,286,2.387,287,2.211,288,2.47,289,1.338,290,2,291,2.211,292,1.338,293,1.338,294,2.211,295,1.338,296,1.338,297,2.211,298,1.338,299,2.825,300,1.101,301,0.946,302,1.338,303,0.946,304,1.338,305,1.338,306,1.338,307,2.825,308,1.338,309,1.338,310,1.338,311,1.338,312,1.338,313,3.633,314,1.338,315,1.338,316,1.338,317,1.37,318,1.338,319,1.338,320,1.338,321,1.82,322,1.338,323,2.211,324,1.338,325,1.338,326,1.338,327,1.338,328,1.338,329,1.338,330,1.338,331,1.338,332,1.338,333,1.338,334,1.338,335,1.338,336,1.338,337,1.338,338,1.338,339,2.825,340,2.825,341,2.211,342,1.338,343,1.338,344,2.211,345,2.211,346,1.338,347,1.338,348,1.338,349,2.211,350,2.211,351,1.338,352,1.338,353,1.338,354,1.338,355,1.849,356,2.866,357,1.338,358,1.338,359,0.659,360,1.338,361,1.338,362,1.997,363,1.338,364,1.338,365,1.338,366,1.338,367,1.338,368,1.338,369,1.338,370,1.338,371,1.338,372,1.338,373,1.338,374,1.338,375,1.338,376,1.338,377,1.338,378,1.338,379,0.829,380,1.338,381,1.338,382,1.338]],["title/guards/JwtAuthGuard.html",[134,1.661,383,1.871]],["body/guards/JwtAuthGuard.html",[3,0.374,4,0.374,5,0.281,7,0.374,8,1.171,13,0.04,14,0.859,16,1.171,17,1.171,18,0.688,19,1.171,21,0.815,23,0.88,24,0.479,28,0.374,29,0.197,30,1.373,33,1.754,39,0.023,40,0.023,78,1.373,79,0.859,90,1.763,97,0.901,101,1.763,102,1.546,103,2.6,104,2.066,112,2.964,113,1.677,134,1.973,146,0.97,147,1.973,170,1.373,176,1.106,178,1.763,179,1.546,186,1.106,188,1.833,189,4.161,191,2.964,199,1.763,203,1.763,204,1.546,218,2.95,231,2.054,233,2.054,234,2.964,303,1.763,317,1.546,383,2.6,384,1.763,385,2.964,386,2.054,387,3.997,388,2.495,389,2.495,390,2.054,391,3.774,392,2.495,393,2.95,394,2.95,395,1.763,396,2.054,397,1.763,398,2.95,399,2.054,400,4.466,401,2.495,402,4.193,403,2.495,404,2.495,405,2.495,406,2.495,407,2.495,408,2.495,409,2.495,410,2.495,411,2.495,412,2.495,413,2.495]],["title/injectables/JwtStrategy.html",[79,0.724,167,1.487]],["body/injectables/JwtStrategy.html",[3,0.492,4,0.492,5,0.369,7,0.492,8,1.413,13,0.039,14,1.037,16,1.071,17,1.071,18,0.629,19,1.071,21,1.071,23,0.989,24,0.629,28,0.492,29,0.258,33,1.184,39,0.028,40,0.028,79,1.037,80,1.614,97,1.184,113,1.936,121,1.804,135,2.031,137,2.536,146,0.83,161,1.184,167,2.131,172,2.316,176,1.452,179,2.031,186,2.145,202,2.698,234,2.316,262,2.316,286,1.614,290,1.804,355,1.31,414,2.698,415,4.325,416,4.325,417,4.325,418,3.277,419,4.325,420,3.277,421,3.277,422,3.277,423,3.277,424,2.698,425,3.277,426,3.277,427,3.277,428,3.277,429,3.277,430,3.277,431,3.277,432,3.277,433,3.277,434,3.277]],["title/guards/RolesGuard.html",[383,1.871,435,1.871]],["body/guards/RolesGuard.html",[3,0.515,4,0.515,5,0.387,7,0.515,8,1.458,13,0.039,14,1.07,16,1.458,17,1.458,18,0.857,19,1.458,21,1.123,23,0.857,24,0.66,28,0.515,29,0.271,30,1.891,33,1.242,39,0.029,40,0.029,79,1.07,84,1.79,97,1.242,113,1.981,176,1.523,186,1.523,199,2.428,303,2.428,384,2.428,387,4.474,390,2.828,391,4.317,393,3.673,394,3.673,395,2.428,396,2.828,397,2.428,398,2.828,399,2.828,435,2.765,436,2.828,437,3.436,438,3.436,439,3.153,440,3.436,441,3.436]],["title/entities/User.html",[146,0.58,442,1.871]],["body/entities/User.html",[3,0.45,4,0.45,5,0.338,7,0.45,12,3.322,13,0.039,14,1.285,18,1.029,23,0.576,28,0.45,29,0.236,39,0.026,40,0.026,78,3.071,84,2.016,146,0.998,159,2.244,160,1.852,161,1.673,258,2.12,286,2.281,288,2.244,290,2.549,301,2.12,355,1.852,356,2.87,359,1.478,362,2.12,442,2.527,443,2.469,444,4.63,445,4.076,446,3,447,4.63,448,3,449,2.881,450,4.076,451,3,452,5.359,453,3,454,3,455,3,456,3,457,3.356]],["title/controllers/UserController.html",[0,1.338,458,1.871]],["body/controllers/UserController.html",[0,0.804,2,0.726,3,0.272,4,0.272,5,0.204,7,0.272,8,0.923,12,2.903,13,0.039,14,1.123,16,1.385,17,1.385,18,0.814,19,1.385,21,1.53,23,0.751,24,0.349,28,0.272,29,0.143,30,0.999,31,0.999,39,0.018,40,0.018,84,2.053,97,1.693,111,1.494,113,2.272,114,2.854,117,1.494,120,3.719,121,2.578,129,1.283,130,1.494,131,1.494,134,0.999,136,1.494,146,0.899,152,3.488,160,1.794,161,1.021,232,2.764,286,0.894,288,2.47,290,2.153,359,0.894,379,1.125,385,1.283,435,1.125,449,2.45,458,1.751,459,1.494,460,2.854,461,2.854,462,3.466,463,3.911,464,3.911,465,2.824,466,1.815,467,3.22,468,1.815,469,1.815,470,1.815,471,3.987,472,1.815,473,1.815,474,3.488,475,1.815,476,3.22,477,3.22,478,3.911,479,1.815,480,1.815,481,1.815,482,1.815,483,1.815,484,1.815,485,1.815,486,1.815,487,2.824,488,1.815,489,1.494,490,1.815,491,1.708,492,1.494,493,1.815,494,1.815,495,1.494,496,2.824,497,1.815,498,2.824,499,1.815,500,2.854,501,1.815,502,1.815,503,2.824,504,1.815,505,2.824,506,2.824,507,1.815,508,1.815,509,1.815,510,1.494,511,1.815,512,1.815,513,1.815,514,1.815,515,1.494,516,1.815,517,1.815,518,1.815,519,1.494,520,1.815,521,1.494,522,1.815,523,1.815]],["title/classes/UserDTO.html",[29,0.238,137,1.487]],["body/classes/UserDTO.html",[3,0.49,4,0.49,5,0.368,7,0.49,13,0.039,14,1.282,16,1.067,17,1.067,18,1.027,19,1.067,28,0.49,29,0.257,39,0.028,40,0.028,84,2.162,137,2.126,157,2.309,159,2.376,161,2.024,186,1.447,286,2.76,288,2.943,290,2.943,355,2.24,524,2.689,525,4.315,526,4.315,527,3.266,528,3.266,529,3.266,530,3.266,531,3.266,532,3.266,533,3.266]],["title/modules/UserModule.html",[41,0.986,55,1.487]],["body/modules/UserModule.html",[2,1.657,3,0.461,4,0.461,5,0.346,13,0.04,23,1.077,24,0.59,28,0.461,29,0.242,39,0.027,40,0.027,41,1.532,43,1.362,44,1.362,45,1.692,46,1.692,47,1.362,48,2.581,49,1.692,54,2.392,55,2.83,56,2.281,57,1.692,58,1.692,60,2.569,146,0.59,167,2.659,169,2.531,170,1.692,175,2.531,176,1.362,177,2.531,178,2.173,179,1.905,180,2.173,181,2.531,182,2.531,183,2.531,241,2.531,242,1.905,263,2.531,458,2.906,491,2.659,492,2.531,534,2.531,535,3.074,536,2.531,537,3.074,538,3.074,539,3.074,540,3.074]],["title/injectables/UserService.html",[79,0.724,491,1.487]],["body/injectables/UserService.html",[3,0.23,4,0.23,5,0.172,7,0.23,8,0.807,13,0.04,14,1.052,16,1.362,17,1.362,18,0.801,19,1.362,20,1.745,21,1.362,23,0.596,24,0.294,28,0.23,29,0.121,31,0.843,33,1.92,39,0.016,40,0.016,79,0.592,80,0.755,84,1.998,97,1.507,103,2.92,104,2.321,106,2.553,113,2.164,121,2.295,146,0.949,147,2.818,160,1.56,161,0.892,186,1.094,187,1.261,188,1.422,191,1.745,200,1.531,203,1.083,204,0.95,206,2.928,209,2.514,211,1.745,213,0.95,225,1.261,286,1.217,288,2.893,355,0.987,356,1.531,359,1.217,379,1.531,395,1.083,449,2.192,460,2.033,461,2.033,467,2.553,471,3.756,474,3.756,476,2.928,477,2.928,491,1.217,541,1.261,542,2.469,543,3.557,544,2.469,545,2.469,546,1.532,547,2.469,548,3.102,549,1.532,550,3.901,551,2.469,552,1.532,553,2.469,554,1.532,555,1.532,556,2.469,557,1.532,558,2.469,559,1.532,560,1.532,561,1.532,562,3.901,563,3.102,564,2.469,565,1.532,566,1.532,567,1.532,568,1.532,569,3.102,570,2.469,571,3.557,572,2.469,573,2.469,574,2.469,575,3.557,576,2.469,577,2.469,578,2.469,579,2.033,580,3.901,581,1.532,582,1.532,583,1.532,584,1.532,585,2.469]],["title/coverage.html",[586,3.37]],["body/coverage.html",[0,2.104,1,1.954,5,0.355,6,2.595,13,0.039,18,0.605,25,1.553,29,0.332,34,1.735,39,0.027,40,0.027,47,1.397,79,1.267,81,2.595,104,1.553,109,1.954,110,2.595,123,1.735,132,1.553,134,1.735,137,1.553,146,0.605,158,2.595,167,1.553,184,2.595,188,1.26,264,2.595,321,4.922,383,2.613,385,2.228,386,2.595,414,2.595,435,1.954,436,2.595,439,2.228,442,1.954,443,2.595,458,1.954,459,2.595,491,1.553,524,2.595,541,2.595,586,2.595,587,3.152,588,3.152,589,5.284,590,3.152,591,3.152,592,3.152,593,3.152,594,3.152,595,2.595,596,3.152,597,5.069,598,3.47,599,4.215,600,2.595,601,4.215,602,3.152,603,3.152]],["title/dependencies.html",[44,1.606,604,2.085]],["body/dependencies.html",[13,0.04,24,0.696,27,2.983,29,0.364,39,0.03,40,0.03,44,1.606,62,2.983,68,2.983,69,2.983,135,2.246,170,1.995,172,2.561,200,2.246,242,2.246,300,2.983,301,2.561,397,2.561,424,4.183,605,5.081,606,3.624,607,3.624,608,3.624,609,3.624,610,3.624,611,3.624,612,3.624,613,3.624,614,3.624,615,3.624,616,3.624,617,3.624,618,3.624,619,3.624,620,3.624,621,3.624,622,3.624,623,3.624,624,3.624,625,3.624,626,3.624,627,3.624,628,3.624,629,3.624]],["title/miscellaneous/enumerations.html",[630,1.248,631,2.983]],["body/miscellaneous/enumerations.html",[7,0.653,13,0.038,39,0.033,40,0.033,146,0.993,355,2.067,359,2.547,362,3.654,630,2.146,631,3.585,632,4.355,633,4.355,634,4.539]],["title/miscellaneous/functions.html",[630,1.248,635,2.983]],["body/miscellaneous/functions.html",[7,0.686,13,0.034,39,0.034,40,0.034,47,2.494,595,3.767,630,2.254,635,3.767,636,4.576]],["title/index.html",[7,0.38,637,2.533,638,2.533]],["body/index.html",[5,0.273,13,0.037,34,1.333,39,0.023,40,0.023,41,1.347,55,1.193,112,2.479,115,3.536,116,1.712,120,3.648,129,2.915,135,1.501,146,1.094,160,1.649,180,1.712,230,2.887,232,2.915,247,2.479,250,1.712,252,1.712,253,1.712,266,3.395,317,2.803,355,0.968,356,1.501,359,2.032,379,1.501,400,1.994,442,1.501,489,3.395,495,1.994,500,3.722,510,1.994,515,2.887,519,1.994,521,1.994,579,1.994,639,1.994,640,2.422,641,3.395,642,1.994,643,1.994,644,3.507,645,3.507,646,2.422,647,2.422,648,4.124,649,4.521,650,2.422,651,2.422,652,2.422,653,2.422,654,2.422,655,2.422,656,2.422,657,2.422,658,2.422,659,2.422,660,2.422,661,2.422,662,2.422,663,2.422,664,2.422,665,2.422,666,2.422,667,2.887,668,2.422,669,4.521,670,2.422,671,2.422,672,2.422,673,3.507,674,2.422,675,2.422,676,2.422,677,2.422,678,2.422,679,4.124,680,4.124,681,4.124,682,4.124,683,4.124,684,2.422,685,2.422,686,2.887,687,2.422,688,2.887,689,2.422,690,2.422,691,2.422,692,2.422,693,3.507,694,2.422,695,3.507,696,1.994,697,2.422,698,2.422,699,2.422,700,2.422,701,2.422,702,2.422,703,2.422,704,2.422,705,2.422,706,3.507,707,2.422,708,2.422,709,2.422,710,2.422,711,2.422,712,2.422,713,2.422]],["title/modules.html",[43,1.814]],["body/modules.html",[13,0.033,39,0.033,40,0.033,42,2.676,43,1.913,53,2.376,54,1.913,55,2.127,714,5.686,715,5.686,716,5.686,717,5.686]],["title/overview.html",[718,3.37]],["body/overview.html",[2,1.277,13,0.038,25,2.354,39,0.027,40,0.027,41,1.043,42,3.586,43,1.415,44,1.415,45,1.757,46,1.757,47,1.415,48,1.757,49,1.757,50,2.628,51,2.628,52,2.628,53,3.153,54,2.507,55,2.822,56,2.34,57,1.757,58,1.757,80,1.573,132,2.354,157,2.257,164,2.628,165,2.628,167,2.51,188,2.227,237,2.628,238,2.628,239,2.628,258,2.257,317,1.979,384,2.257,491,2.354,534,2.628,536,2.628,667,2.628,686,3.5,688,2.628,696,2.628,718,2.628]],["title/properties.html",[159,1.994,604,2.085]],["body/properties.html",[13,0.038,39,0.033,40,0.033,146,0.836,159,2.397,639,3.585,641,3.585,642,3.585,643,3.585,719,4.355,720,4.355,721,4.355,722,4.355,723,4.355,724,4.355,725,4.355,726,4.355,727,4.355]],["title/miscellaneous/variables.html",[630,1.248,728,2.983]],["body/miscellaneous/variables.html",[7,0.637,13,0.038,18,0.815,39,0.033,40,0.033,84,1.533,355,1.697,439,4.087,457,4.19,598,3.493,600,4.19,630,2.091,634,4.19,728,3.493,729,5.09,730,4.243]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":321,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["0.1.1",{"_index":720,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":597,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":589,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":593,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":590,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":317,"title":{},"body":{"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"index.html":{},"overview.html":{}}}],["1.0.0",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{}}}],["10.0.0",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["16.4.7",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["1h",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["2",{"_index":686,"title":{},"body":{"index.html":{},"overview.html":{}}}],["3",{"_index":688,"title":{},"body":{"index.html":{},"overview.html":{}}}],["3.3.0",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":652,"title":{},"body":{"index.html":{}}}],["4",{"_index":667,"title":{},"body":{"index.html":{},"overview.html":{}}}],["4.0.1",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":696,"title":{},"body":{"index.html":{},"overview.html":{}}}],["5.1.1",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":255,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["6",{"_index":698,"title":{},"body":{"index.html":{}}}],["7",{"_index":702,"title":{},"body":{"index.html":{}}}],["7.8.1",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":100,"title":{},"body":{"injectables/AppService.html":{}}}],["8.13.1",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["access",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["access_token",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":685,"title":{},"body":{"index.html":{}}}],["admin",{"_index":359,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["admin,partner,user",{"_index":710,"title":{},"body":{"index.html":{}}}],["alice",{"_index":353,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["alice@example.com",{"_index":354,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["already",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{}}}],["another",{"_index":662,"title":{},"body":{"index.html":{}}}],["api",{"_index":519,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["apis",{"_index":677,"title":{},"body":{"index.html":{}}}],["app",{"_index":678,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":42,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":25,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["asc",{"_index":306,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["async",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"index.html":{}}}],["auth.controller",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":386,"title":{},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:7",{"_index":389,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.guard.ts:9",{"_index":392,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.service",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/login",{"_index":687,"title":{},"body":{"index.html":{}}}],["auth/profile",{"_index":689,"title":{},"body":{"index.html":{}}}],["auth/register",{"_index":684,"title":{},"body":{"index.html":{}}}],["authcontroller",{"_index":109,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":123,"title":{"classes/AuthDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authdto,userdto",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto.username",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":708,"title":{},"body":{"index.html":{}}}],["authmodule",{"_index":53,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":723,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":709,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":132,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":259,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["await",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["badrequestexception",{"_index":395,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["badrequestexception(\"user",{"_index":408,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["badrequestexception('email",{"_index":578,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('username",{"_index":573,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('your",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(authdto.password",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(oldpassword",{"_index":565,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(\"password123",{"_index":351,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["bcrypt.hash(authdto.password",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newpassword",{"_index":568,"title":{},"body":{"injectables/UserService.html":{}}}],["belong",{"_index":409,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["bind",{"_index":410,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["bob",{"_index":357,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["bob@example.com",{"_index":358,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["body",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["body('email",{"_index":506,"title":{},"body":{"controllers/UserController.html":{}}}],["body('id",{"_index":504,"title":{},"body":{"controllers/UserController.html":{}}}],["body('isactive",{"_index":507,"title":{},"body":{"controllers/UserController.html":{}}}],["body('newpassword",{"_index":513,"title":{},"body":{"controllers/UserController.html":{}}}],["body('newrole",{"_index":508,"title":{},"body":{"controllers/UserController.html":{}}}],["body('password",{"_index":512,"title":{},"body":{"controllers/UserController.html":{}}}],["body('username",{"_index":505,"title":{},"body":{"controllers/UserController.html":{}}}],["boolean",{"_index":449,"title":{},"body":{"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["bootstrap",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":717,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":714,"title":{},"body":{"modules.html":{}}}],["c",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"injectables/DatabaseService.html":{}}}],["canactivate",{"_index":387,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":390,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["catch",{"_index":101,"title":{},"body":{"injectables/AppService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{}}}],["change",{"_index":510,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["changepassword",{"_index":460,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["changepassword(password",{"_index":466,"title":{},"body":{"controllers/UserController.html":{}}}],["changepassword(userid",{"_index":547,"title":{},"body":{"injectables/UserService.html":{}}}],["charlie",{"_index":360,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["charlie@example.com",{"_index":361,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["check",{"_index":690,"title":{},"body":{"index.html":{}}}],["checkdatabase",{"_index":265,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["chua",{"_index":341,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["class",{"_index":29,"title":{"classes/AuthDTO.html":{},"classes/UserDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":157,"title":{},"body":{"classes/AuthDTO.html":{},"classes/UserDTO.html":{},"overview.html":{}}}],["client",{"_index":299,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["client.connect",{"_index":314,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["client.end",{"_index":334,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["client.query",{"_index":315,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["client.query(`create",{"_index":322,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["cloud",{"_index":665,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":237,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":238,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":239,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":534,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":535,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":536,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["co",{"_index":338,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["column",{"_index":452,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":450,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":444,"title":{},"body":{"entities/User.html":{}}}],["compile",{"_index":668,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('username",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('lỗi",{"_index":329,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["console.log(\"1",{"_index":434,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log(\"jwt",{"_index":402,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["console.log(\"path",{"_index":91,"title":{},"body":{"injectables/AppService.html":{}}}],["console.log('database",{"_index":349,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["console.log(`database",{"_index":323,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["console.log(req.user",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["constructor(dbservice",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["constructor(id",{"_index":525,"title":{},"body":{"classes/UserDTO.html":{}}}],["constructor(jwtservice",{"_index":388,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["constructor(private",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["constructor(roles",{"_index":437,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(userrepository",{"_index":275,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["context",{"_index":393,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":399,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('user",{"_index":494,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":586,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":266,"title":{},"body":{"injectables/DatabaseService.html":{},"index.html":{}}}],["create(user",{"_index":280,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["credentials",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["công",{"_index":326,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["daisy",{"_index":363,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["daisy@example.com",{"_index":364,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["data",{"_index":580,"title":{},"body":{"injectables/UserService.html":{}}}],["data.map",{"_index":584,"title":{},"body":{"injectables/UserService.html":{}}}],["database",{"_index":247,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"index.html":{}}}],["database.service",{"_index":244,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["database/database.module.ts",{"_index":664,"title":{},"body":{"index.html":{}}}],["databasemodule",{"_index":54,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseservice",{"_index":188,"title":{"injectables/DatabaseService.html":{}},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["datname",{"_index":319,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["db_host=localhost",{"_index":653,"title":{},"body":{"index.html":{}}}],["db_name=user_service",{"_index":657,"title":{},"body":{"index.html":{}}}],["db_password=your_password",{"_index":656,"title":{},"body":{"index.html":{}}}],["db_port=5432",{"_index":654,"title":{},"body":{"index.html":{}}}],["db_username=your_username",{"_index":655,"title":{},"body":{"index.html":{}}}],["dbname",{"_index":313,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["dbservice",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["declarations",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":457,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":44,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":639,"title":{},"body":{"index.html":{},"properties.html":{}}}],["detail",{"_index":700,"title":{},"body":{"index.html":{}}}],["development",{"_index":670,"title":{},"body":{"index.html":{}}}],["dinh",{"_index":725,"title":{},"body":{"properties.html":{}}}],["disabled",{"_index":691,"title":{},"body":{"index.html":{}}}],["document",{"_index":712,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["documentpath",{"_index":88,"title":{},"body":{"injectables/AppService.html":{}}}],["dotenv",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos",{"_index":707,"title":{},"body":{"index.html":{}}}],["du",{"_index":339,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["dung",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["edit",{"_index":515,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["editprofile",{"_index":461,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["editprofile(newusername",{"_index":470,"title":{},"body":{"controllers/UserController.html":{}}}],["editprofile(userid",{"_index":551,"title":{},"body":{"injectables/UserService.html":{}}}],["edituser",{"_index":462,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser(id",{"_index":475,"title":{},"body":{"controllers/UserController.html":{}}}],["edituserprofile",{"_index":542,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserprofile(userid",{"_index":553,"title":{},"body":{"injectables/UserService.html":{}}}],["edward",{"_index":365,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["edward@example.com",{"_index":366,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["email",{"_index":286,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["email,role,active",{"_index":501,"title":{},"body":{"controllers/UserController.html":{}}}],["entities",{"_index":258,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":442,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["enumerations",{"_index":631,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["env.example",{"_index":651,"title":{},"body":{"index.html":{}}}],["error",{"_index":102,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{}}}],["error('documentation",{"_index":105,"title":{},"body":{"injectables/AppService.html":{}}}],["error('invalid",{"_index":582,"title":{},"body":{"injectables/UserService.html":{}}}],["example",{"_index":648,"title":{},"body":{"index.html":{}}}],["except",{"_index":703,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":391,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["existingemail",{"_index":575,"title":{},"body":{"injectables/UserService.html":{}}}],["existingemail.id",{"_index":577,"title":{},"body":{"injectables/UserService.html":{}}}],["existinguser",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["existinguser.id",{"_index":572,"title":{},"body":{"injectables/UserService.html":{}}}],["existingusers",{"_index":346,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["existingusers.length",{"_index":348,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["exists",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["expired",{"_index":413,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["expiresin",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["export",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["extends",{"_index":415,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":422,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":427,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":262,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["finally",{"_index":333,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findall",{"_index":267,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyemail",{"_index":268,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyemail(email",{"_index":284,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyuserid",{"_index":269,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyuserid(id",{"_index":287,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyusername",{"_index":270,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyusername(username",{"_index":291,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["finish",{"_index":711,"title":{},"body":{"index.html":{}}}],["fiona",{"_index":367,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["fiona@example.com",{"_index":368,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["forbiddenexception",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["forbiddenexception('invalid",{"_index":412,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["forbiddenexception('no",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('please",{"_index":403,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["found",{"_index":106,"title":{},"body":{"injectables/AppService.html":{},"injectables/UserService.html":{}}}],["frontend",{"_index":713,"title":{},"body":{"index.html":{}}}],["fs",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["function",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":682,"title":{},"body":{"index.html":{}}}],["functions",{"_index":635,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["george",{"_index":369,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["george@example.com",{"_index":370,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["get('/:id",{"_index":487,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/list",{"_index":497,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/profile",{"_index":517,"title":{},"body":{"controllers/UserController.html":{}}}],["getall",{"_index":463,"title":{},"body":{"controllers/UserController.html":{}}}],["getalluser",{"_index":543,"title":{},"body":{"injectables/UserService.html":{}}}],["getdocumentation",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getdocumentation(@res",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["getdocumentation(res",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["getlist",{"_index":464,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["getprofile(@req",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["getting",{"_index":637,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":465,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@param('id",{"_index":522,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(id",{"_index":486,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserinfo",{"_index":544,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserinfo(userid",{"_index":556,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserprofile",{"_index":545,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserprofile(userid",{"_index":558,"title":{},"body":{"injectables/UserService.html":{}}}],["guard",{"_index":383,"title":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["guards",{"_index":384,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["handle",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["hannah",{"_index":371,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["hannah@example.com",{"_index":372,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["hashedpassword",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{}}}],["hello",{"_index":107,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["host",{"_index":250,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"index.html":{}}}],["id",{"_index":290,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{}}}],["identifier",{"_index":587,"title":{},"body":{"coverage.html":{}}}],["if(!user.isactive",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["ignoreexpiration",{"_index":428,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implement",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["implements",{"_index":303,"title":{},"body":{"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{}}}],["included",{"_index":704,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":89,"title":{},"body":{"injectables/AppService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["information",{"_index":500,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["informations",{"_index":701,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":79,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":80,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":302,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["injectrepository(user",{"_index":304,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["install",{"_index":646,"title":{},"body":{"index.html":{}}}],["install2",{"_index":650,"title":{},"body":{"index.html":{}}}],["isactive",{"_index":356,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"index.html":{}}}],["isglobal",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["ispasswordvalid",{"_index":564,"title":{},"body":{"injectables/UserService.html":{}}}],["ivan",{"_index":373,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["ivan@example.com",{"_index":374,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["join",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["join(__dirname",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["julia",{"_index":375,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["julia@example.com",{"_index":376,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["jwt",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_key",{"_index":658,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":134,"title":{"guards/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":426,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtservice",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["jwtstrategy",{"_index":167,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["khi",{"_index":330,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["kiem",{"_index":335,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["kiểm",{"_index":331,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["legend",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":721,"title":{},"body":{"properties.html":{}}}],["lieu",{"_index":340,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["list",{"_index":495,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["local",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["localhost",{"_index":252,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"index.html":{}}}],["logging",{"_index":261,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["login",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["login(@body",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(authdto",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(userdto",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["manage",{"_index":499,"title":{},"body":{"controllers/UserController.html":{}}}],["matching",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":345,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["metadata",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":680,"title":{},"body":{"index.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":630,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":673,"title":{},"body":{"index.html":{}}}],["modify",{"_index":663,"title":{},"body":{"index.html":{}}}],["module",{"_index":41,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":43,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mount",{"_index":380,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["nam",{"_index":726,"title":{},"body":{"properties.html":{}}}],["name",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":640,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":242,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["neu",{"_index":342,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["new",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newemail",{"_index":471,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newisactive",{"_index":476,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newpassword",{"_index":467,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newrole",{"_index":477,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newuser",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{}}}],["newusername",{"_index":474,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["nguyen",{"_index":724,"title":{},"body":{"properties.html":{}}}],["note",{"_index":683,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":560,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception('user",{"_index":563,"title":{},"body":{"injectables/UserService.html":{}}}],["npm",{"_index":649,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":445,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":288,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["nội",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["observable",{"_index":396,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["oldpassword",{"_index":548,"title":{},"body":{"injectables/UserService.html":{}}}],["onapplicationbootstrap",{"_index":271,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["optional",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["out",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":718,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":604,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":647,"title":{},"body":{"index.html":{}}}],["param",{"_index":490,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["parseint(process.env.db_port",{"_index":254,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["partial",{"_index":281,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["partner",{"_index":362,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["partner'].includes(newrole",{"_index":581,"title":{},"body":{"injectables/UserService.html":{}}}],["passport",{"_index":424,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":421,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":416,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":160,"title":{},"body":{"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["password,isactive",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["path",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["payload",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":432,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":430,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.role",{"_index":433,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":431,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["pg",{"_index":300,"title":{},"body":{"injectables/DatabaseService.html":{},"dependencies.html":{}}}],["pg_database",{"_index":318,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["port",{"_index":253,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"index.html":{}}}],["post",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["post('login",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('profile",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgre",{"_index":666,"title":{},"body":{"index.html":{}}}],["postgres",{"_index":246,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgressql",{"_index":661,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":447,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["process.env.db_host",{"_index":251,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["process.env.db_name",{"_index":248,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["process.env.db_password",{"_index":312,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["process.env.db_username",{"_index":256,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["process.env.jwt_key",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{}}}],["production",{"_index":675,"title":{},"body":{"index.html":{}}}],["profile",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"index.html":{}}}],["project",{"_index":644,"title":{},"body":{"index.html":{}}}],["promise",{"_index":394,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["properties",{"_index":159,"title":{"properties.html":{}},"body":{"classes/AuthDTO.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"properties.html":{}}}],["provide",{"_index":404,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["providers",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["put",{"_index":489,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["put('/change",{"_index":511,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/edit",{"_index":503,"title":{},"body":{"controllers/UserController.html":{}}}],["readfilesync",{"_index":86,"title":{},"body":{"injectables/AppService.html":{}}}],["readfilesync(documentpath",{"_index":98,"title":{},"body":{"injectables/AppService.html":{}}}],["readonly",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["register(@body",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(authdto",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(authdto:authdto",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":272,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["remove(id",{"_index":294,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["replaced",{"_index":692,"title":{},"body":{"index.html":{}}}],["repository",{"_index":276,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["req",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["req.user",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":398,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["request.headers.authorization.split",{"_index":401,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["request.user",{"_index":411,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["require('dotenv').config",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{}}}],["required",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["res",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{}}}],["res.rowcount",{"_index":320,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["res.send(documentation",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["res.setheader('content",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["rest",{"_index":585,"title":{},"body":{"injectables/UserService.html":{}}}],["results",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role",{"_index":355,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":439,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(admin,partner,user",{"_index":561,"title":{},"body":{"injectables/UserService.html":{}}}],["roles_key",{"_index":600,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":435,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["rolesguard())@useguards(jwtauthguard)@get('/list",{"_index":482,"title":{},"body":{"controllers/UserController.html":{}}}],["rolesguard())@useguards(jwtauthguard)@put('/edit",{"_index":479,"title":{},"body":{"controllers/UserController.html":{}}}],["rolesguard(['admin",{"_index":496,"title":{},"body":{"controllers/UserController.html":{}}}],["rootpath",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":706,"title":{},"body":{"index.html":{}}}],["run",{"_index":669,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":397,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["sample",{"_index":378,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["sampleusers",{"_index":352,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["secret",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"guards/JwtAuthGuard.html":{},"modules/UserModule.html":{}}}],["secretorkey",{"_index":429,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["seeddatabase",{"_index":273,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["seeded",{"_index":350,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["select",{"_index":316,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["serveroot",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":641,"title":{},"body":{"index.html":{},"properties.html":{}}}],["setmetadata(roles_key",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":645,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["specific",{"_index":521,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["src/.../main.ts",{"_index":636,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.enum.ts",{"_index":632,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:10",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":81,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:18",{"_index":85,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":83,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:26",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:36",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:55",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:7",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt",{"_index":385,"title":{},"body":{"guards/JwtAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy",{"_index":540,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":414,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":420,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":418,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/database/database.module",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["src/database/database.module.ts",{"_index":240,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.service",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["src/database/database.service.ts",{"_index":264,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["src/database/database.service.ts:100",{"_index":293,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:11",{"_index":277,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:16",{"_index":283,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:22",{"_index":292,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:25",{"_index":289,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:28",{"_index":285,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:33",{"_index":282,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:38",{"_index":298,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:42",{"_index":295,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:45",{"_index":279,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:74",{"_index":296,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/dto",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/dto/authdto.ts",{"_index":158,"title":{},"body":{"classes/AuthDTO.html":{},"coverage.html":{}}}],["src/dto/authdto.ts:2",{"_index":163,"title":{},"body":{"classes/AuthDTO.html":{}}}],["src/dto/authdto.ts:3",{"_index":162,"title":{},"body":{"classes/AuthDTO.html":{}}}],["src/dto/userdto.ts",{"_index":524,"title":{},"body":{"classes/UserDTO.html":{},"coverage.html":{}}}],["src/dto/userdto.ts:2",{"_index":528,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/dto/userdto.ts:3",{"_index":529,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/dto/userdto.ts:4",{"_index":527,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/dto/userdto.ts:5",{"_index":526,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/main.ts",{"_index":595,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/role.enum.ts",{"_index":633,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/roles.decorator.ts",{"_index":598,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/roles.guards",{"_index":493,"title":{},"body":{"controllers/UserController.html":{}}}],["src/roles.guards.ts",{"_index":436,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/roles.guards.ts:5",{"_index":438,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/roles.guards.ts:7",{"_index":440,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/user/user.controller.ts",{"_index":459,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:26",{"_index":483,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:33",{"_index":480,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:48",{"_index":469,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:58",{"_index":473,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:68",{"_index":485,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:75",{"_index":481,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:80",{"_index":488,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":443,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:12",{"_index":446,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:15",{"_index":453,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:18",{"_index":454,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:21",{"_index":451,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:6",{"_index":448,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:9",{"_index":455,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.module.ts",{"_index":537,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":541,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:12",{"_index":549,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:26",{"_index":552,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:42",{"_index":559,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:48",{"_index":554,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:6",{"_index":546,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:67",{"_index":557,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:72",{"_index":555,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":671,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":674,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":676,"title":{},"body":{"index.html":{}}}],["started",{"_index":638,"title":{"index.html":{}},"body":{}}],["statements",{"_index":588,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["status",{"_index":502,"title":{},"body":{"controllers/UserController.html":{}}}],["strategy",{"_index":423,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"classes/AuthDTO.html":{},"injectables/DatabaseService.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.db_password",{"_index":257,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["stt",{"_index":679,"title":{},"body":{"index.html":{}}}],["super",{"_index":425,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":715,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":716,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":260,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["system",{"_index":643,"title":{},"body":{"index.html":{},"properties.html":{}}}],["table",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":574,"title":{},"body":{"injectables/UserService.html":{}}}],["tao",{"_index":344,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["tasks",{"_index":705,"title":{},"body":{"index.html":{}}}],["temp",{"_index":520,"title":{},"body":{"controllers/UserController.html":{}}}],["text/html",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["thi",{"_index":343,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.appservice.getdocumentation",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(user",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(authdto",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(authdto",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.checkdatabase",{"_index":381,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.dbservice.create",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.dbservice.findall",{"_index":583,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.findbyemail(newemail",{"_index":576,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.findbyuserid(payload.id",{"_index":407,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["this.dbservice.findbyuserid(userid",{"_index":562,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.findbyusername(authdto.username",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.dbservice.findbyusername(newusername",{"_index":570,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.update(userid",{"_index":569,"title":{},"body":{"injectables/UserService.html":{}}}],["this.email",{"_index":532,"title":{},"body":{"classes/UserDTO.html":{}}}],["this.id",{"_index":530,"title":{},"body":{"classes/UserDTO.html":{}}}],["this.jwtservice.sign(payload",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":406,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["this.role",{"_index":533,"title":{},"body":{"classes/UserDTO.html":{}}}],["this.roles.includes(request.user.role.tolowercase",{"_index":441,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.seeddatabase",{"_index":382,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.username",{"_index":531,"title":{},"body":{"classes/UserDTO.html":{}}}],["this.userrepository.create(user",{"_index":308,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.delete(id",{"_index":311,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.find",{"_index":347,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.find({order",{"_index":305,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.findone",{"_index":307,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.save(newuser",{"_index":309,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.save(sampleusers",{"_index":377,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.update(id",{"_index":310,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userservice.changepassword(req.user.id",{"_index":514,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.editprofile(req.user.id,newusername",{"_index":516,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.edituserprofile(id,newusername",{"_index":509,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getalluser",{"_index":498,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserinfo(id",{"_index":523,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserprofile(req.user.id",{"_index":518,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["thuan",{"_index":727,"title":{},"body":{"properties.html":{}}}],["thành",{"_index":325,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["token",{"_index":400,"title":{},"body":{"guards/JwtAuthGuard.html":{},"index.html":{}}}],["tr",{"_index":96,"title":{},"body":{"injectables/AppService.html":{}}}],["tra",{"_index":336,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["tra/tạo",{"_index":332,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["transformer",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"entities/User.html":{}}}],["try",{"_index":90,"title":{},"body":{"injectables/AppService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{}}}],["type",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":301,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":241,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":263,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":245,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["tại",{"_index":328,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["tạo",{"_index":324,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["tồn",{"_index":327,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["unauthorizedexception",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":456,"title":{},"body":{"entities/User.html":{}}}],["unknown",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":722,"title":{},"body":{"properties.html":{}}}],["update",{"_index":274,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["update(id",{"_index":297,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["url",{"_index":681,"title":{},"body":{"index.html":{}}}],["use",{"_index":579,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["useguards",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@get('/profile",{"_index":484,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@post('profile",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@put('/change",{"_index":468,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@put('/edit",{"_index":472,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(new",{"_index":478,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":146,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["user.controller",{"_index":538,"title":{},"body":{"modules/UserModule.html":{}}}],["user.entity",{"_index":539,"title":{},"body":{"modules/UserModule.html":{}}}],["user.id",{"_index":571,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":492,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/:id",{"_index":694,"title":{},"body":{"index.html":{}}}],["user/change",{"_index":697,"title":{},"body":{"index.html":{}}}],["user/edit",{"_index":695,"title":{},"body":{"index.html":{}}}],["user/list",{"_index":699,"title":{},"body":{"index.html":{}}}],["user/profile",{"_index":693,"title":{},"body":{"index.html":{}}}],["user/user.entity",{"_index":243,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["user/user.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["user_service",{"_index":249,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["usercontroller",{"_index":458,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":137,"title":{"classes/UserDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserDTO.html":{},"coverage.html":{}}}],["userid",{"_index":550,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":55,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":161,"title":{},"body":{"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":278,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["users",{"_index":379,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["userservice",{"_index":491,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwithoutpassword",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["userwithoutpassword.email",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwithoutpassword.id",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwithoutpassword.role",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwithoutpassword.username",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["using",{"_index":660,"title":{},"body":{"index.html":{}}}],["utf",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["v",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["validate",{"_index":417,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(authdto",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(authdto:authdto",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["value",{"_index":634,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":599,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":728,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify",{"_index":405,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["version",{"_index":719,"title":{},"body":{"properties.html":{}}}],["void",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["vou",{"_index":642,"title":{},"body":{"index.html":{},"properties.html":{}}}],["watch",{"_index":672,"title":{},"body":{"index.html":{}}}],["world",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["xem",{"_index":337,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["your_jwt_key3",{"_index":659,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getDocumentation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDocumentation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDocumentation(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { Response } from 'express';\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n\n  @Get()\n  getDocumentation(@Res() res: Response): void {\n    const documentation = this.appService.getDocumentation();\n    res.setHeader('Content-Type', 'text/html');\n    res.send(documentation); \n  }\n}\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { DatabaseModule } from './database/database.module';\nimport { UserModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n@Module({\n  imports: [ServeStaticModule.forRoot({\n    rootPath: join(__dirname, '..', 'documentation'), \n    serveRoot: '/', \n  }),\n    DatabaseModule,\n  ConfigModule.forRoot({ isGlobal: true }),\n    UserModule,\n    AuthModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDocumentation\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDocumentation\n                        \n                    \n                \n            \n            \n                \ngetDocumentation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { join } from 'path';\nimport { readFileSync } from 'fs';\n\n@Injectable()\nexport class AppService {\n  getDocumentation(): string {\n    const documentPath = join(__dirname, '..', 'documentation', 'index.html');\n    try {\n      console.log(\"path = \", documentPath);\n      // Đọc nội dung file và trả về\n      return readFileSync(documentPath, 'utf-8');\n    } catch (error) {\n      throw new Error('Documentation file not found.');\n    }\n  }\n\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(authDTO: AuthDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDTO\n                                            \n                                                            AuthDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(authDTO: AuthDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDTO\n                                            \n                                                            AuthDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Req, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport { AuthDTO, UserDTO } from './../DTO';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  async register(@Body() authDTO: AuthDTO ) {\n    // required implement handle error and verification here\n    const user = await this.authService.register(authDTO);\n    return this.authService.login(user);\n  }\n\n  @Post('login')\n  async login(@Body() authDTO: AuthDTO ) {\n    \n    const user = await this.authService.validateUser(authDTO);\n    return this.authService.login(user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('profile')\n  async getProfile(@Req() req: any) {\n    // console.log(req.user);\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDTO.html":{"url":"classes/AuthDTO.html","title":"class - AuthDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/DTO/authDTO.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/authDTO.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/authDTO.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AuthDTO{\n    username: string\n    password: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { DatabaseModule } from 'src/database/database.module';\nrequire('dotenv').config();\n@Module({\n  imports: [\n    DatabaseModule,\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_KEY, // .env\n      signOptions: { expiresIn: '1h' },\n    }),\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dbService: DatabaseService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dbService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(userDTO: UserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userDTO\n                                            \n                                                            UserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(authDTO: AuthDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDTO\n                                            \n                                                            AuthDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(authDTO: AuthDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDTO\n                                            \n                                                            AuthDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException, ConflictException, ForbiddenException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { AuthDTO,UserDTO } from 'src/DTO';\nimport { DatabaseService } from 'src/database/database.service';\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly dbService: DatabaseService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async register(authDTO:AuthDTO) {\n    const existingUser = await this.dbService.findByUsername(authDTO.username);\n    if (existingUser) {\n      throw new ConflictException('Username already exists');\n    }\n\n    const hashedPassword = await bcrypt.hash(authDTO.password, 10);\n    const newUser = await this.dbService.create({\n      username: authDTO.username,\n      password: hashedPassword,\n    });\n\n\n    const { password: _, ...userWithoutPassword } = newUser;\n    const userDTO = new UserDTO(\n      userWithoutPassword.id,\n      userWithoutPassword.username,\n      userWithoutPassword.email,\n      userWithoutPassword.role\n    );\n    return userDTO;\n  }\n\n  async validateUser(authDTO:AuthDTO) {\n    const user = await this.dbService.findByUsername(authDTO.username);\n    if (!user || !(await bcrypt.compare(authDTO.password, user.password))) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n    if(!user.isActive){\n      throw new ForbiddenException('No permission to access this profile!');\n    }\n\n    const { password,isActive, ...userWithoutPassword } = user;\n    const userDTO = new UserDTO(\n      userWithoutPassword.id,\n      userWithoutPassword.username,\n      userWithoutPassword.email,\n      userWithoutPassword.role\n    );\n    return userDTO;\n  }\n\n  async login(userDTO: UserDTO) {\n    const payload = { ...userDTO };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\n\nDatabaseService \n\nDatabaseService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/user.entity';\nimport { DatabaseService } from './database.service';\nrequire('dotenv').config();\n\n\n@Module({\n    imports: [TypeOrmModule.forRoot({\n        type: 'postgres',\n        database: process.env.DB_NAME || 'user_service', \n        host: process.env.DB_HOST || 'localhost',\n        port: parseInt(process.env.DB_PORT, 10) || 5432,\n        username: process.env.DB_USERNAME,\n        password: String(process.env.DB_PASSWORD),\n        entities: [User],\n        autoLoadEntities: true,\n        synchronize: true,\n        logging: false, \n    }), TypeOrmModule.forFeature([User])],\n    providers: [DatabaseService],\n    controllers: [],\n    exports: [DatabaseService]\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseService.html":{"url":"injectables/DatabaseService.html","title":"injectable - DatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/database.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkDatabase\n                            \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findByEmail\n                            \n                            \n                                findByUserID\n                            \n                            \n                                findByUsername\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                seedDatabase\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/database/database.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkDatabase\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkDatabase()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByEmail\n                        \n                    \n                \n            \n            \n                \nfindByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByUserID\n                        \n                    \n                \n            \n            \n                \nfindByUserID(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByUsername\n                        \n                    \n                \n            \n            \n                \nfindByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        seedDatabase\n                        \n                    \n                \n            \n            \n                \n                        \n                    seedDatabase()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, user: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { Client } from 'pg';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user/user.entity';\nimport * as bcrypt from 'bcrypt';\n\nrequire('dotenv').config();\n\n@Injectable()\nexport class DatabaseService implements OnApplicationBootstrap {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) { }\n  findAll() {\n    return this.userRepository.find({order: {\n      id: 'ASC', \n    },});\n  }\n\n  findByUsername(username: string) {\n    return this.userRepository.findOne({ where: { username } });\n  }\n  findByUserID(id: number) {\n    return this.userRepository.findOne({ where: { id } });\n  }\n  findByEmail(email: string) {\n    return this.userRepository.findOne({ where: { email } });\n  }\n\n\n  create(user: Partial) {\n    const newUser = this.userRepository.create(user);\n    return this.userRepository.save(newUser);\n  }\n\n  update(id: number, user: Partial) {\n    return this.userRepository.update(id, user);\n  }\n\n  remove(id: number) {\n    return this.userRepository.delete(id);\n  }\n  private async checkDatabase() {\n    const client = new Client({\n      user: process.env.DB_USERNAME,\n      password: process.env.DB_PASSWORD,\n      host: process.env.DB_HOST || 'localhost',\n      port: parseInt(process.env.DB_PORT || '5432', 10),\n    });\n\n    const dbName = process.env.DB_NAME || 'user_service';\n\n    try {\n      await client.connect();\n      const res = await client.query(\n        `SELECT 1 FROM pg_database WHERE datname = $1`,\n        [dbName]\n      );\n\n      if (res.rowCount === 0) {\n        await client.query(`CREATE DATABASE ${dbName}`);\n        console.log(`Database \"${dbName}\" đã được tạo thành công!`);\n      } else {\n        console.log(`Database \"${dbName}\" đã tồn tại.`);\n      }\n    } catch (error) {\n      console.error('Lỗi khi kiểm tra/tạo database:', error);\n    } finally {\n      await client.end();\n    }\n  }\n  async seedDatabase() {\n    // Kiem tra xem co du lieu chua, neu chua thi tao du lieu mau\n    const existingUsers = await this.userRepository.find();\n    if (existingUsers.length > 0) {\n      console.log('Database already seeded.');\n      return;\n    }\n    const hashedPassword = await bcrypt.hash(\"password123\", 10); \n    //tao 10 du lieu mau\n    const sampleUsers = [\n      { username: 'Alice', email: 'alice@example.com', password: hashedPassword, role: 'user', isActive: true },\n      { username: 'Bob', email: 'bob@example.com', password: hashedPassword, role: 'admin', isActive: true },\n      { username: 'Charlie', email: 'charlie@example.com', password: hashedPassword, role: 'partner', isActive: false },\n      { username: 'Daisy', email: 'daisy@example.com', password: hashedPassword, role: 'user', isActive: true },\n      { username: 'Edward', email: 'edward@example.com', password: hashedPassword, role: 'user', isActive: true },\n      { username: 'Fiona', email: 'fiona@example.com', password: hashedPassword, role: 'partner', isActive: true },\n      { username: 'George', email: 'george@example.com', password: hashedPassword, role: 'user', isActive: true },\n      { username: 'Hannah', email: 'hannah@example.com', password: hashedPassword, role: 'user', isActive: true },\n      { username: 'Ivan', email: 'ivan@example.com', password: hashedPassword, role: 'partner', isActive: false },\n      { username: 'Julia', email: 'julia@example.com', password: hashedPassword, role: 'user', isActive: true },\n    ];\n    await this.userRepository.save(sampleUsers);\n    console.log('Database seeded with 10 sample users.');\n  }\n\n  //mount\n  async onApplicationBootstrap() {\n    await this.checkDatabase();\n    await this.seedDatabase();\n  }\n}\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/JwtAuthGuard.html":{"url":"guards/JwtAuthGuard.html","title":"guard - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/jwt-auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, dbService: DatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dbService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, ForbiddenException, BadRequestException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\nimport { DatabaseService } from 'src/database/database.service';\nrequire('dotenv').config();\n@Injectable()\nexport class JwtAuthGuard implements CanActivate {\n    constructor(private jwtService: JwtService, private dbService: DatabaseService) { };\n    async canActivate(\n        context: ExecutionContext,\n    ): Promise {\n        const request = context.switchToHttp().getRequest();\n        try {\n             //get token\n        const token = request.headers.authorization.split(' ')[1];\n        // console.log(\"jwt auth guard: token = \", token)\n        if (!token) {\n            throw new ForbiddenException('Please provide access token');\n        }\n        // verify token\n        const payload = await this.jwtService.verifyAsync(token, {\n            secret: process.env.JWT_KEY,\n        })\n        // console.log(\"jwt auth guard: payload = \", payload)\n\n        //\n        const user = await this.dbService.findByUserID(payload.id);\n        if (!user) {\n            throw new BadRequestException(\"User not belong to token!\")\n        }\n        // console.log(\"jwt auth guard: user = \", user)\n        const { password,isActive, ...userWithoutPassword }=user;\n        //bind user to request\n        request.user = userWithoutPassword;\n        } catch (error) {\n            throw new ForbiddenException('Invalid token or expired')\n        }\n        return true;\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: UserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UserDTO } from 'src/DTO';\nrequire('dotenv').config();\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_KEY,\n    });\n  }\n\n  async validate(payload: UserDTO) {\n     const user ={ id: payload.id, username: payload.username, email: payload.email, role: payload.role};\n     console.log(\"1\");\n     return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/roles.guards.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(roles: string[])\n                    \n                \n                        \n                            \n                                Defined in src/roles.guards.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roles\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles.guards.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, ForbiddenException, BadRequestException } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nrequire('dotenv').config();\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor(private roles: string[] ){};\n    async canActivate(\n        context: ExecutionContext,\n    ): Promise {\n        const request = context.switchToHttp().getRequest();\n        return this.roles.includes(request.user.role.toLowerCase());\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({unique: true})\n  username: string;\n\n  @Column({ unique: true, nullable: true  })\n  email: string;\n\n  @Column()\n  password: string;\n\n  @Column({ default: 'user' })\n  role: string; // 'user', 'partner', 'admin'\n\n  @Column({ default: true })\n  isActive: boolean;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                editProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                editUser\n                            \n                            \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getList\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    Async\n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(password: string, newPassword: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put('/change-password')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        editProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    editProfile(newUsername: string, newEmail: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put('/edit-profile')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newUsername\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUser(id: number, newUsername: string, newEmail: string, newIsActive: boolean, newRole: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(new RolesGuard())@UseGuards(JwtAuthGuard)@Put('/edit-user')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newUsername\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newIsActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newRole\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(new RolesGuard())@UseGuards(JwtAuthGuard)@Get('/list')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('/profile')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { \n  Controller, \n  UseGuards, \n  Get, \n  Post, \n  Put, \n  Body, \n  Param, \n  Req, \n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { RolesGuard } from 'src/roles.guards';\n\n\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  //// Admin-only\n  // get user list\n  @UseGuards(new RolesGuard(['admin']))\n  @UseGuards(JwtAuthGuard)\n  @Get('/list')\n  async getList(){\n    return this.userService.getAllUser();\n  } \n  //manage user information (username, email,role,active status)\n  @UseGuards(new RolesGuard(['admin']))\n  @UseGuards(JwtAuthGuard)\n  @Put('/edit-user')\n  async editUser(\n    @Body('id') id: number,\n    @Body('username') newUsername: string,\n    @Body('email') newEmail: string,\n    @Body('isActive') newIsActive: boolean,\n    @Body('newRole') newRole: string,\n  ) {\n\n    return this.userService.editUserProfile(id,newUsername, newEmail, newRole, newIsActive);\n  }\n\n\n  //change password\n  @UseGuards(JwtAuthGuard)\n  @Put('/change-password')\n  async changePassword(\n    @Body('password') password: string,\n    @Body('newPassword') newPassword: string,\n    @Req() req: any,\n  ) {\n    return this.userService.changePassword(req.user.id, password, newPassword);\n  }\n  //edit profile (username, email)\n  @UseGuards(JwtAuthGuard)\n  @Put('/edit-profile')\n  async editProfile(\n    @Body('username') newUsername: string,\n    @Body('email') newEmail: string,\n    @Req() req: any,\n  ) {\n    return this.userService.editProfile(req.user.id,newUsername, newEmail);\n  }\n  //user get their own profile\n  @UseGuards(JwtAuthGuard)\n  @Get('/profile')\n  async getProfile( @Req() req: any,){\n    return this.userService.getUserProfile(req.user.id)\n  }\n\n  //// API (temp)\n  //get all users information\n  @Get('/')\n  async getAll(){\n    return this.userService.getAllUser();\n  }\n  // get information of a specific user\n  @Get('/:id')\n  async getUser(@Param('id') id: number){\n    return this.userService.getUserInfo(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDTO.html":{"url":"classes/UserDTO.html","title":"class - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/DTO/userDTO.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                role\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number, username: string, email: string, role: string)\n                    \n                \n                        \n                            \n                                Defined in src/DTO/userDTO.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        role\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/userDTO.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/userDTO.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/userDTO.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/userDTO.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserDTO{\n    id: number\n    username: string\n    email: string\n    role: string\n    constructor(id: number, username: string, email: string, role: string) {\n        this.id = id;\n        this.username = username;\n        this.email = email;\n        this.role = role;\n      }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUserModule -->\n\nJwtStrategy->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { User } from './user.entity';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from 'src/auth/jwt.strategy';\nrequire('dotenv').config();\n@Module({\n  imports: [DatabaseModule, JwtModule.register({\n    secret: process.env.JWT_KEY, // .env\n    signOptions: { expiresIn: '1h' },\n  }), TypeOrmModule.forFeature([User])],\n  providers: [UserService, JwtStrategy],\n  controllers: [UserController],\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                editProfile\n                            \n                            \n                                    Async\n                                editUserProfile\n                            \n                            \n                                    Async\n                                getAllUser\n                            \n                            \n                                    Async\n                                getUserInfo\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dbService: DatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dbService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: number, oldPassword: string, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                oldPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    editProfile(userId: number, newUsername: string, newEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newUsername\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUserProfile(userId: number, newUsername: string, newEmail: string, newRole: string, newIsActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newUsername\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newRole\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newIsActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserInfo(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException, NotFoundException } from '@nestjs/common';\nimport { DatabaseService } from 'src/database/database.service';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UserService {\n\n  constructor(\n    private readonly dbService: DatabaseService,\n  ) { }\n  //all roles(admin,partner,user)\n  async changePassword(userId: number, oldPassword: string, newPassword: string) {\n    const user = await this.dbService.findByUserID(userId);\n    if (!user) {\n      throw new NotFoundException('User not found.');\n    }\n\n    const isPasswordValid = await bcrypt.compare(oldPassword, user.password);\n    if (!isPasswordValid) {\n      throw new BadRequestException('Your password is incorrect.');\n    }\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    const res = await this.dbService.update(userId, { password: hashedPassword });\n    return res;\n  }\n  async editProfile(userId: number, newUsername: string, newEmail: string) {\n    const user = await this.dbService.findByUserID(userId);\n    if (!user) {\n      throw new NotFoundException('User not found.');\n    }\n    const existingUser = await this.dbService.findByUsername(newUsername);\n    if (existingUser && user.id !== existingUser.id) {\n      throw new BadRequestException('Username is already taken.');\n    }\n    const existingEmail = await this.dbService.findByEmail(newEmail);\n    if (existingEmail && user.id !== existingEmail.id) {\n      throw new BadRequestException('Email is already in use.');\n    }\n\n    return this.dbService.update(userId, { username: newUsername, email: newEmail });\n  }\n  async getUserProfile(userId: number) {\n    const data = await this.dbService.findByUserID(userId);\n    const { password, isActive, ...user } = data;\n    return user;\n  }\n  //admin\n  async editUserProfile(userId: number, newUsername: string, newEmail: string, newRole: string, newIsActive: boolean) {\n    const user = await this.dbService.findByUserID(userId);\n    if (!user) {\n      throw new NotFoundException('User not found.');\n    }\n    const existingUser = await this.dbService.findByUsername(newUsername);\n    if (existingUser && user.id != existingUser.id) {\n      throw new BadRequestException('Username is already taken.');\n    }\n    const existingEmail = await this.dbService.findByEmail(newEmail);\n    if (existingEmail && user.id != existingEmail.id) {\n      throw new BadRequestException('Email is already in use.');\n    }\n\n    if (!['admin', 'user', 'partner'].includes(newRole)) {\n      throw new Error('Invalid role');\n    }\n    return this.dbService.update(userId, { username: newUsername, email: newEmail, isActive: newIsActive, role: newRole });\n  }\n  async getUserInfo(userId: number) {\n    const data = await this.dbService.findByUserID(userId);\n    const { password, ...user } = data;\n    return user;\n  }\n  async getAllUser() {\n    const data = await this.dbService.findAll();\n    const Users = data.map(({ password, ...rest }) => rest);\n    return Users;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/DTO/authDTO.ts\n            \n            class\n            AuthDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/DTO/userDTO.ts\n            \n            class\n            UserDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            guard\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/database.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles.guards.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/serve-static : ^4.0.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.4.7\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 Partner\n                            \n                        \n                        \n                            \n                                Value : partner\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\n###[Nest] User service of VOU system\n\nProject setup\n1/ install packages\nExample :$ npm install2/ create your .env from .env.example\nExample :HOST = localhost\nPORT = 3000\nDB_HOST=localhost\nDB_PORT=5432\nDB_USERNAME=your_username\nDB_PASSWORD=your_password\nDB_NAME=user_service\nJWT_KEY = your_JWT_key3/ This service using postgresSQL. If you use another database, modify in file database/database.module.ts or setup a cloud Postgre service\n4/ Compile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prod\nAPIs:\nAPP:\n\n\n\nSTT\nMethod\nURL\nFunctionality\nNote\n\n\n\n\n1\nGET\n/\nDocumentation\n\n\n\n\nAUTH:\n\n\n\nSTT\nMethod\nURL\nFunctionality\nNote\n\n\n\n\n1\nPOST\nauth/register\nuser register account\n\n\n\n2\nPOST\nauth/login\nuser login\n\n\n\n3\nPOST\nauth/profile\ncheck profile\ndisabled, replaced with user/profile\n\n\n\nUSER:\n\n\n\nSTT\nMethod\nURL\nFunctionality\nNote\n\n\n\n\n1\nGET\nuser/\nget all users information\nno permission req\n\n\n2\nGET\nuser/:id\nget a specific user information\nno permission req\n\n\n3\nGET\nuser/profile\nget user own profile\nreq: login token\n\n\n4\nPUT\nuser/edit-profile\nuser edit their information\nreq: login\n\n\n5\nPUT\nuser/change-password\nuser change their password\nreq: login\n\n\n6\nGET\nuser/list\nget user detail informations\nreq: login as admin\n\n\n7\nPUT\nuser/edit-user\nedit user information except password\nreq: login as admin, included role & isActive\n\n\n\nTASKS LIST:\n\n Database.\n create user module & routes.\n User entity.\n create auth module & routes.\n DTOs\n Authentication. (jwt)\n Authorization. (admin,partner,user)\n Finish UserModule.\n Document\n Admin FrontEnd\n API module.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nDatabaseService \n\nDatabaseService \n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\nUserModule -->\n\nJwtStrategy->UserModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.1\n        \n            Description : user service of VOU system\n        \n            License : UNLICENSED\n        \n            Author : Nguyen Dinh Nam Thuan\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
