var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.338,1,1.871]],["body/controllers/AppController.html",[0,2.049,1,2.866,2,1.452,3,0.545,4,0.545,5,0.409,6,2.99,7,0.545,8,1.511,9,3.806,10,3.632,11,5.354,12,2.252,13,0.039,14,0.871,15,3.632,16,1.187,17,1.187,18,0.888,19,1.187,20,3.595,21,1.187,22,4.624,23,0.977,24,0.697,25,2.506,26,2.99,27,2.99,28,0.545,29,0.286,30,2,31,2,32,3.632,33,1.313,34,2,35,3.632,36,3.632,37,3.632,38,3.632,39,0.03,40,0.03]],["title/modules/AppModule.html",[41,0.986,42,1.871]],["body/modules/AppModule.html",[1,2.873,2,1.632,3,0.451,4,0.451,5,0.338,13,0.04,23,1.086,24,0.577,25,2.642,26,2.474,28,0.451,29,0.237,34,1.654,39,0.026,40,0.026,41,1.514,42,3.606,43,1.332,44,1.332,45,1.654,46,1.654,47,1.332,48,2.551,49,1.654,50,2.474,51,2.474,52,2.474,53,2.951,54,2.376,55,2.642,56,2.247,57,1.654,58,1.654,59,3.005,60,2.53,61,3.005,62,2.474,63,3.005,64,3.005,65,3.005,66,3.005,67,3.005,68,2.474,69,2.474,70,2.474,71,2.474,72,3.005,73,3.005,74,2.474,75,3.005,76,3.005,77,3.005,78,1.654]],["title/injectables/AppService.html",[25,1.487,79,0.724]],["body/injectables/AppService.html",[3,0.503,4,0.503,5,0.551,7,0.503,8,1.435,9,4.276,13,0.04,14,1.053,21,1.435,23,0.94,24,0.644,25,2.163,28,0.503,29,0.264,33,1.212,34,1.845,39,0.028,40,0.028,70,2.76,71,2.76,74,2.76,79,1.053,80,1.652,81,2.76,82,5.194,83,3.353,84,1.877,85,3.353,86,3.353,87,3.353,88,4.39,89,3.353,90,2.37,91,3.353,92,2.76,93,3.353,94,3.353,95,4.39,96,3.353,97,1.587,98,3.353,99,3.353,100,3.353,101,2.37,102,2.078,103,2.078,104,1.652,105,3.353,106,2.76,107,3.353,108,3.353]],["title/controllers/AuthController.html",[0,1.338,109,1.871]],["body/controllers/AuthController.html",[0,1.229,2,1.109,3,0.416,4,0.416,5,0.312,7,0.416,8,1.262,12,2.755,13,0.04,14,1.066,16,1.452,17,1.452,18,0.853,19,1.452,21,1.452,23,0.923,24,0.533,28,0.416,29,0.219,30,1.527,31,1.527,33,1.396,39,0.025,40,0.025,97,1.606,102,1.719,109,2.394,110,2.284,111,2.284,112,1.961,113,2.223,114,3.18,115,2.73,116,2.73,117,2.284,118,2.774,119,2.774,120,3.141,121,2.446,122,2.774,123,3.132,124,3.863,125,2.774,126,2.284,127,3.863,128,2.774,129,1.961,130,2.284,131,2.284,132,2.19,133,2.284,134,1.527,135,1.719,136,2.284,137,1.367,138,2.774,139,2.774,140,2.774,141,2.774,142,2.774,143,2.774,144,2.774,145,2.774,146,0.742,147,2.126,148,2.774,149,3.863,150,2.774,151,2.774,152,2.284,153,2.774,154,2.774,155,2.774,156,2.774]],["title/classes/AuthDTO.html",[29,0.238,123,1.661]],["body/classes/AuthDTO.html",[3,0.625,4,0.625,5,0.469,7,0.625,13,0.037,14,1.208,18,0.967,28,0.625,29,0.329,39,0.033,40,0.033,84,2.031,123,2.772,157,2.947,158,3.432,159,2.772,160,2.164,161,1.956,162,4.169,163,4.169]],["title/modules/AuthModule.html",[41,0.986,53,1.661]],["body/modules/AuthModule.html",[2,1.692,3,0.475,4,0.475,5,0.357,13,0.04,23,1.068,24,0.609,28,0.475,29,0.25,39,0.027,40,0.027,41,1.556,43,1.405,44,1.405,45,1.745,46,1.745,47,1.405,48,2.621,49,1.745,53,3.18,54,2.413,56,2.329,57,1.745,58,1.745,60,2.622,109,2.952,132,2.683,133,2.609,164,2.609,165,2.609,166,3.169,167,2.683,168,3.169,169,2.609,170,1.745,171,4.23,172,2.24,173,3.169,174,3.169,175,2.609,176,1.405,177,2.609,178,2.24,179,1.965,180,2.24,181,2.609,182,2.609,183,2.609]],["title/injectables/AuthService.html",[79,0.724,132,1.487]],["body/injectables/AuthService.html",[3,0.342,4,0.342,5,0.256,7,0.342,8,1.096,13,0.04,14,1.053,16,1.435,17,1.435,18,0.843,19,1.435,21,1.301,23,0.899,24,0.437,28,0.342,29,0.179,31,1.846,33,1.916,39,0.022,40,0.022,79,0.804,80,1.122,97,1.439,103,2.468,104,2.306,113,2.121,115,2.371,116,2.371,121,2.191,123,2.695,126,1.875,132,1.652,137,2.694,146,0.764,147,2.577,160,1.341,161,0.823,170,1.254,184,1.875,185,3.354,186,1.486,187,1.875,188,1.756,189,4.168,190,2.278,191,2.371,192,3.354,193,2.278,194,2.278,195,2.278,196,2.278,197,2.278,198,2.278,199,1.61,200,2.079,201,2.278,202,1.875,203,1.61,204,2.079,205,2.278,206,2.761,207,3.354,208,2.278,209,1.61,210,2.278,211,2.371,212,2.278,213,1.412,214,2.761,215,2.278,216,2.278,217,2.278,218,2.761,219,3.354,220,3.354,221,3.354,222,3.354,223,2.278,224,2.278,225,1.875,226,2.278,227,2.278,228,2.278,229,2.278,230,1.875,231,1.875,232,1.61,233,1.875,234,1.61,235,2.278,236,2.278]],["title/modules/DatabaseModule.html",[41,0.986,54,1.338]],["body/modules/DatabaseModule.html",[2,1.299,3,0.487,4,0.487,5,0.366,13,0.039,18,0.624,23,0.985,24,0.624,28,0.487,29,0.256,39,0.028,40,0.028,41,1.575,43,1.44,44,1.44,45,1.788,46,1.788,47,1.44,48,2.653,49,2.653,54,2.479,56,2.367,57,1.788,58,1.788,60,2.014,78,2.367,146,0.826,160,1.299,161,1.174,176,1.44,188,2.355,213,2.014,237,2.674,238,2.674,239,2.674,240,3.248,241,2.674,242,2.014,243,2.674,244,3.248,245,3.248,246,3.248,247,2.296,248,2.674,249,2.674,250,2.296,251,2.674,252,2.296,253,2.296,254,2.674,255,2.674,256,2.674,257,3.248,258,2.296,259,3.248,260,3.248,261,3.248,262,2.296,263,2.674]],["title/injectables/DatabaseService.html",[79,0.724,188,1.207]],["body/injectables/DatabaseService.html",[3,0.201,4,0.201,5,0.151,7,0.201,8,0.723,13,0.04,14,1.138,16,1.353,17,1.353,18,0.795,19,1.353,20,0.947,21,1.512,23,0.752,24,0.257,28,0.201,29,0.106,33,1.565,39,0.014,40,0.014,78,2.384,79,0.531,80,0.66,84,1.415,90,0.947,92,1.103,97,1.565,101,0.947,102,1.372,104,0.66,113,1.795,146,0.948,147,2.472,160,1.897,161,1.751,176,0.594,186,0.981,188,0.885,200,1.372,204,2.035,209,0.947,211,3.353,213,2.035,214,1.103,242,0.831,243,1.103,247,1.564,248,1.103,249,1.103,250,0.947,251,1.103,252,0.947,253,0.947,254,1.103,255,1.103,256,1.103,262,1.564,264,1.103,265,3.284,266,1.822,267,3.284,268,2.213,269,2.213,270,2.213,271,3.915,272,2.213,273,3.284,274,2.213,275,1.34,276,3.284,277,1.34,278,2.213,279,1.34,280,2.213,281,3.915,282,1.34,283,1.34,284,2.213,285,1.34,286,2.388,287,2.213,288,2.472,289,1.34,290,1.791,291,2.213,292,1.34,293,1.34,294,2.213,295,1.34,296,1.34,297,2.213,298,1.34,299,2.828,300,1.103,301,0.947,302,1.34,303,0.947,304,1.34,305,2.213,306,1.34,307,1.34,308,2.828,309,1.34,310,1.34,311,1.34,312,1.34,313,1.34,314,3.635,315,1.34,316,1.34,317,1.34,318,1.372,319,1.34,320,1.34,321,1.34,322,1.557,323,1.34,324,2.213,325,1.34,326,1.34,327,1.34,328,1.34,329,1.34,330,1.34,331,1.34,332,1.34,333,1.34,334,1.34,335,1.34,336,1.34,337,1.34,338,1.34,339,1.34,340,2.828,341,2.828,342,2.213,343,1.34,344,1.34,345,2.213,346,2.213,347,1.34,348,1.34,349,2.213,350,2.213,351,4.331,352,1.34,353,1.34,354,1.34,355,1.34,356,1.85,357,2.783,358,2.868,359,1.34,360,1.34,361,0.66,362,1.34,363,1.34,364,1.557,365,1.34,366,1.34,367,1.34,368,1.34,369,1.34,370,1.34,371,1.34,372,1.34,373,1.34,374,1.34,375,1.34,376,1.34,377,1.34,378,1.34,379,1.34,380,1.34,381,1.34,382,1.34,383,1.34,384,0.831,385,1.34,386,1.34,387,1.34]],["title/guards/JwtAuthGuard.html",[134,1.661,388,1.871]],["body/guards/JwtAuthGuard.html",[3,0.384,4,0.384,5,0.288,7,0.384,8,1.192,13,0.04,14,0.875,16,1.192,17,1.192,18,0.7,19,1.192,21,0.835,23,0.89,24,0.491,28,0.384,29,0.201,30,1.407,33,1.771,39,0.024,40,0.024,78,1.407,79,0.875,90,1.807,97,0.924,101,1.807,102,1.585,103,2.635,104,2.094,112,3.005,113,1.7,134,2.007,146,0.978,147,2.007,170,1.407,176,1.133,178,1.807,179,1.585,186,1.133,188,1.853,189,4.195,191,3.005,199,1.807,203,1.807,204,1.585,218,3.002,231,2.105,233,2.105,234,3.005,303,1.807,318,1.585,388,2.635,389,1.807,390,3.005,391,2.105,392,4.035,393,2.556,394,2.556,395,2.105,396,3.816,397,2.556,398,3.002,399,3.002,400,1.807,401,2.105,402,1.807,403,3.002,404,2.105,405,5.457,406,2.556,407,4.251,408,2.556,409,2.556,410,2.556,411,2.556,412,2.556,413,2.556,414,2.556,415,2.556,416,2.556,417,2.556,418,2.556]],["title/injectables/JwtStrategy.html",[79,0.724,167,1.487]],["body/injectables/JwtStrategy.html",[3,0.5,4,0.5,5,0.375,7,0.5,8,1.429,13,0.039,14,1.048,16,1.088,17,1.088,18,0.64,19,1.088,21,1.088,23,0.995,24,0.64,28,0.5,29,0.263,33,1.204,39,0.028,40,0.028,79,1.048,80,1.641,97,1.204,113,1.951,121,1.834,135,2.065,137,2.553,146,0.839,161,1.204,167,2.154,172,2.355,176,1.476,179,2.065,186,2.163,202,2.742,234,2.355,262,2.355,286,1.641,290,1.641,356,1.332,419,2.742,420,4.372,421,4.372,422,4.372,423,3.331,424,4.372,425,3.331,426,3.331,427,3.331,428,3.331,429,2.742,430,3.331,431,3.331,432,3.331,433,3.331,434,3.331,435,3.331,436,3.331,437,3.331,438,3.331,439,3.331]],["title/guards/RolesGuard.html",[388,1.871,440,1.871]],["body/guards/RolesGuard.html",[3,0.523,4,0.523,5,0.393,7,0.523,8,1.472,13,0.039,14,1.08,16,1.472,17,1.472,18,0.865,19,1.472,21,1.139,23,0.865,24,0.67,28,0.523,29,0.275,30,1.919,33,1.26,39,0.029,40,0.029,79,1.08,84,1.803,97,1.26,113,1.995,176,1.545,186,1.545,199,2.465,303,2.465,389,2.465,392,4.495,395,2.871,396,4.341,398,3.708,399,3.708,400,2.465,401,2.871,402,2.465,403,2.871,404,2.871,440,2.792,441,2.871,442,3.487,443,3.487,444,3.184,445,3.487,446,3.487]],["title/entities/User.html",[146,0.58,447,1.871]],["body/entities/User.html",[3,0.439,4,0.439,5,0.33,7,0.439,12,3.377,13,0.039,14,1.306,18,1.046,23,0.562,28,0.439,29,0.231,39,0.026,40,0.026,78,3.054,84,2.005,146,0.989,159,2.208,160,1.829,161,1.653,258,2.071,286,2.253,288,2.708,290,2.253,301,2.071,322,2.208,356,1.829,357,2.835,358,2.835,361,1.443,364,1.613,447,2.486,448,2.412,449,4.574,450,4.011,451,2.929,452,4.574,453,2.929,454,2.835,455,4.919,456,2.929,457,2.929,458,5.321,459,2.929,460,2.929,461,2.929,462,2.929,463,3.302]],["title/controllers/UserController.html",[0,1.338,464,1.871]],["body/controllers/UserController.html",[0,0.782,2,0.706,3,0.265,4,0.265,5,0.199,7,0.265,8,0.903,12,2.975,13,0.039,14,1.151,16,1.449,17,1.449,18,0.852,19,1.449,21,1.568,23,0.74,24,0.339,28,0.265,29,0.139,30,0.972,31,0.972,39,0.018,40,0.018,84,2.045,97,1.734,111,1.454,113,2.294,114,2.804,117,1.454,120,3.694,121,2.641,129,1.248,130,1.454,131,1.454,134,0.972,136,1.454,146,0.89,152,3.443,160,1.774,161,0.999,232,2.723,286,0.87,288,2.715,290,2.185,361,0.87,384,1.094,390,1.248,440,1.094,454,2.407,464,1.713,465,1.454,466,2.804,467,2.804,468,3.406,469,3.853,470,3.853,471,2.764,472,2.275,473,1.766,474,3.172,475,1.766,476,1.766,477,1.766,478,3.95,479,1.766,480,1.766,481,3.443,482,1.766,483,3.172,484,3.172,485,3.172,486,3.853,487,1.766,488,1.766,489,1.766,490,1.766,491,1.766,492,1.766,493,1.766,494,1.766,495,2.764,496,1.766,497,1.454,498,2.764,499,1.766,500,1.454,501,1.766,502,1.678,503,1.454,504,1.766,505,1.766,506,1.454,507,2.764,508,1.766,509,2.764,510,1.766,511,2.804,512,1.766,513,1.766,514,2.764,515,1.766,516,2.764,517,2.764,518,1.766,519,1.766,520,1.766,521,1.766,522,1.454,523,1.766,524,1.766,525,1.766,526,1.766,527,1.454,528,1.766,529,1.766,530,1.766,531,1.454,532,1.766,533,1.454,534,1.766,535,1.766,536,1.766,537,1.766]],["title/classes/UserDTO.html",[29,0.238,137,1.487]],["body/classes/UserDTO.html",[3,0.498,4,0.498,5,0.374,7,0.498,13,0.039,14,1.289,16,1.085,17,1.085,18,1.032,19,1.085,28,0.498,29,0.262,39,0.028,40,0.028,84,2.166,137,2.149,157,2.347,159,2.402,161,2.032,186,1.472,286,2.771,288,2.959,290,2.648,356,2.249,538,2.734,539,4.363,540,4.363,541,3.321,542,3.321,543,3.321,544,3.321,545,3.321,546,3.321,547,3.321]],["title/modules/UserModule.html",[41,0.986,55,1.487]],["body/modules/UserModule.html",[2,1.678,3,0.47,4,0.47,5,0.353,13,0.04,23,1.082,24,0.601,28,0.47,29,0.247,39,0.027,40,0.027,41,1.547,43,1.388,44,1.388,45,1.724,46,1.724,47,1.388,48,2.605,49,1.724,54,2.405,55,2.84,56,2.31,57,1.724,58,1.724,60,2.601,146,0.601,167,2.674,169,2.578,170,1.724,175,2.578,176,1.388,177,2.578,178,2.213,179,1.941,180,2.213,181,2.578,182,2.578,183,2.578,241,2.578,242,1.941,263,2.578,464,2.934,502,2.674,503,2.578,548,2.578,549,3.131,550,2.578,551,3.131,552,3.131,553,3.131,554,3.131]],["title/injectables/UserService.html",[79,0.724,502,1.487]],["body/injectables/UserService.html",[3,0.216,4,0.216,5,0.162,7,0.216,8,0.766,13,0.04,14,1.068,16,1.395,17,1.395,18,0.82,19,1.395,20,1.657,21,1.395,23,0.57,24,0.276,28,0.216,29,0.113,31,0.791,33,1.931,39,0.015,40,0.015,79,0.562,80,0.708,84,1.976,97,1.665,103,2.937,104,2.334,106,2.821,113,2.186,121,2.351,146,0.966,147,2.813,160,1.619,161,0.847,186,1.039,187,1.183,188,1.37,191,1.657,200,1.454,203,1.016,204,0.891,206,2.821,209,2.422,211,1.657,213,0.891,225,1.183,286,1.155,288,3.01,290,0.708,322,0.791,356,0.575,357,1.454,358,1.841,361,1.155,364,1.291,384,1.454,400,1.016,454,2.099,466,1.93,467,1.93,472,1.93,474,2.445,478,3.666,481,3.666,483,2.821,484,2.445,485,2.821,497,1.93,502,1.155,555,1.183,556,2.345,557,3.426,558,2.345,559,2.345,560,1.437,561,2.345,562,2.97,563,1.437,564,3.774,565,2.345,566,1.437,567,2.345,568,1.437,569,1.437,570,2.345,571,1.437,572,1.437,573,2.345,574,1.437,575,1.437,576,1.437,577,3.774,578,3.426,579,2.345,580,1.437,581,1.437,582,1.437,583,1.437,584,2.97,585,2.345,586,3.426,587,2.345,588,2.345,589,2.345,590,3.426,591,2.345,592,2.345,593,2.345,594,1.93,595,1.437,596,4.453,597,1.437,598,1.437,599,1.437,600,1.437,601,1.437,602,1.437,603,1.437,604,1.437,605,2.345]],["title/coverage.html",[606,3.37]],["body/coverage.html",[0,2.123,1,1.989,5,0.361,6,2.641,13,0.039,18,0.616,25,1.581,29,0.336,34,1.766,39,0.028,40,0.028,47,1.422,79,1.275,81,2.641,104,1.581,109,1.989,110,2.641,123,1.766,132,1.581,134,1.766,137,1.581,146,0.616,158,2.641,167,1.581,184,2.641,188,1.283,264,2.641,322,3.298,388,2.644,390,2.268,391,2.641,419,2.641,440,1.989,441,2.641,444,2.268,447,1.989,448,2.641,464,1.989,465,2.641,502,1.581,538,2.641,555,2.641,606,2.641,607,3.208,608,3.208,609,5.315,610,3.208,611,3.208,612,3.208,613,3.208,614,3.208,615,2.641,616,3.208,617,5.105,618,3.511,619,4.265,620,2.641,621,4.265,622,3.208,623,3.208]],["title/dependencies.html",[44,1.606,624,2.085]],["body/dependencies.html",[13,0.04,24,0.705,27,3.022,29,0.367,39,0.03,40,0.03,44,1.627,62,3.022,68,3.022,69,3.022,135,2.275,170,2.021,172,2.595,200,2.275,242,2.275,300,3.022,301,2.595,402,2.595,429,4.208,625,5.111,626,3.671,627,3.671,628,3.671,629,3.671,630,3.671,631,3.671,632,3.671,633,3.671,634,3.671,635,3.671,636,3.671,637,3.671,638,3.671,639,3.671,640,3.671,641,3.671,642,3.671,643,3.671,644,3.671,645,3.671,646,3.671,647,3.671,648,3.671,649,3.671]],["title/miscellaneous/enumerations.html",[650,1.248,651,2.983]],["body/miscellaneous/enumerations.html",[7,0.657,13,0.038,39,0.034,40,0.034,146,0.996,356,2.074,361,2.555,364,2.855,650,2.157,651,3.605,652,4.379,653,4.379,654,4.549]],["title/miscellaneous/functions.html",[650,1.248,655,2.983]],["body/miscellaneous/functions.html",[7,0.689,13,0.034,39,0.034,40,0.034,47,2.497,615,3.779,650,2.262,655,3.779,656,4.59]],["title/index.html",[7,0.38,657,2.533,658,2.533]],["body/index.html",[5,0.252,13,0.04,34,1.232,39,0.021,40,0.021,41,1.288,55,1.103,112,2.341,115,3.44,116,1.582,120,3.654,129,2.786,135,1.388,146,1.095,160,1.576,180,1.582,230,3.244,232,2.786,247,2.341,250,1.582,252,1.582,253,1.582,266,3.244,318,2.881,322,1.232,356,1.324,357,2.053,358,1.388,361,1.942,364,1.232,384,1.388,447,1.388,500,3.244,506,1.843,511,3.585,522,1.843,527,2.726,531,1.843,533,1.843,594,1.843,659,1.843,660,2.239,661,3.244,662,1.843,663,1.843,664,3.311,665,3.311,666,2.239,667,2.239,668,3.941,669,4.355,670,2.239,671,2.239,672,2.239,673,2.239,674,2.239,675,2.239,676,2.239,677,2.239,678,2.239,679,2.239,680,2.239,681,2.239,682,2.239,683,2.239,684,2.239,685,2.239,686,2.239,687,2.726,688,2.239,689,4.355,690,2.239,691,2.239,692,2.239,693,3.311,694,2.239,695,2.239,696,2.239,697,2.239,698,2.239,699,3.941,700,3.941,701,3.941,702,3.941,703,3.941,704,2.239,705,2.239,706,3.244,707,2.239,708,3.244,709,2.239,710,2.239,711,2.239,712,2.239,713,3.311,714,2.239,715,2.239,716,2.239,717,2.239,718,3.311,719,2.239,720,2.239,721,2.239,722,2.239,723,1.843,724,2.239,725,3.311,726,2.239,727,3.311,728,2.239,729,2.239,730,2.239,731,2.239,732,2.239,733,2.239,734,2.239]],["title/modules.html",[43,1.814]],["body/modules.html",[13,0.033,39,0.033,40,0.033,42,2.692,43,1.924,53,2.39,54,1.924,55,2.139,735,5.697,736,5.697,737,5.697,738,5.697]],["title/overview.html",[739,3.37]],["body/overview.html",[2,1.299,13,0.038,25,2.375,39,0.028,40,0.028,41,1.061,42,3.597,43,1.44,44,1.44,45,1.788,46,1.788,47,1.44,48,1.788,49,1.788,50,2.674,51,2.674,52,2.674,53,3.164,54,2.517,55,2.832,56,2.367,57,1.788,58,1.788,80,1.6,132,2.375,157,2.296,164,2.674,165,2.674,167,2.528,188,2.237,237,2.674,238,2.674,239,2.674,258,2.296,318,2.014,389,2.296,502,2.375,548,2.674,550,2.674,687,2.674,706,3.54,708,2.674,723,2.674,739,2.674]],["title/properties.html",[159,1.994,624,2.085]],["body/properties.html",[13,0.038,39,0.034,40,0.034,146,0.841,159,2.41,659,3.605,661,3.605,662,3.605,663,3.605,740,4.379,741,4.379,742,4.379,743,4.379,744,4.379,745,4.379,746,4.379,747,4.379,748,4.379]],["title/miscellaneous/variables.html",[650,1.248,749,2.983]],["body/miscellaneous/variables.html",[7,0.641,13,0.038,18,0.82,39,0.033,40,0.033,84,1.544,356,1.708,444,4.095,463,4.207,618,3.516,620,4.207,650,2.104,654,4.207,749,3.516,750,5.11,751,4.271]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":322,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["0.1.1",{"_index":741,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":318,"title":{},"body":{"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"index.html":{},"overview.html":{}}}],["1.0.0",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{}}}],["10.0.0",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["1001",{"_index":372,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["1002",{"_index":379,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["16.4.7",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["1h",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["2",{"_index":706,"title":{},"body":{"index.html":{},"overview.html":{}}}],["3",{"_index":708,"title":{},"body":{"index.html":{},"overview.html":{}}}],["3.3.0",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":672,"title":{},"body":{"index.html":{}}}],["4",{"_index":687,"title":{},"body":{"index.html":{},"overview.html":{}}}],["4.0.1",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":723,"title":{},"body":{"index.html":{},"overview.html":{}}}],["5.1.1",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":255,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["7.8.1",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":100,"title":{},"body":{"injectables/AppService.html":{}}}],["8.13.1",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["access",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["access_token",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":705,"title":{},"body":{"index.html":{}}}],["admin",{"_index":361,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["admin,partner,user",{"_index":731,"title":{},"body":{"index.html":{}}}],["alice",{"_index":354,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["alice@example.com",{"_index":355,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["already",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{}}}],["another",{"_index":682,"title":{},"body":{"index.html":{}}}],["api",{"_index":531,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["apis",{"_index":697,"title":{},"body":{"index.html":{}}}],["app",{"_index":698,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":42,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":25,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["asc",{"_index":307,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["async",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"index.html":{}}}],["auth.controller",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":391,"title":{},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:7",{"_index":394,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.guard.ts:9",{"_index":397,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.service",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/login",{"_index":707,"title":{},"body":{"index.html":{}}}],["auth/profile",{"_index":709,"title":{},"body":{"index.html":{}}}],["auth/register",{"_index":704,"title":{},"body":{"index.html":{}}}],["authcontroller",{"_index":109,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":123,"title":{"classes/AuthDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authdto,userdto",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto.username",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":729,"title":{},"body":{"index.html":{}}}],["authmodule",{"_index":53,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":744,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":730,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":132,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":259,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["await",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["badrequestexception",{"_index":400,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["badrequestexception(\"user",{"_index":413,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["badrequestexception('email",{"_index":593,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('username",{"_index":588,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('your",{"_index":581,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(authdto.password",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(oldpassword",{"_index":580,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(\"password123",{"_index":352,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["bcrypt.hash(authdto.password",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newpassword",{"_index":583,"title":{},"body":{"injectables/UserService.html":{}}}],["belong",{"_index":414,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["bind",{"_index":415,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["bob",{"_index":359,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["bob@example.com",{"_index":360,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["body",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["body('email",{"_index":517,"title":{},"body":{"controllers/UserController.html":{}}}],["body('id",{"_index":515,"title":{},"body":{"controllers/UserController.html":{}}}],["body('isactive",{"_index":520,"title":{},"body":{"controllers/UserController.html":{}}}],["body('newpassword",{"_index":525,"title":{},"body":{"controllers/UserController.html":{}}}],["body('partner_id",{"_index":519,"title":{},"body":{"controllers/UserController.html":{}}}],["body('password",{"_index":524,"title":{},"body":{"controllers/UserController.html":{}}}],["body('role",{"_index":518,"title":{},"body":{"controllers/UserController.html":{}}}],["body('username",{"_index":516,"title":{},"body":{"controllers/UserController.html":{}}}],["boolean",{"_index":454,"title":{},"body":{"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["bootstrap",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":738,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":735,"title":{},"body":{"modules.html":{}}}],["c",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"injectables/DatabaseService.html":{}}}],["canactivate",{"_index":392,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":395,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["catch",{"_index":101,"title":{},"body":{"injectables/AppService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{}}}],["change",{"_index":522,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["changepassword",{"_index":466,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["changepassword(password",{"_index":473,"title":{},"body":{"controllers/UserController.html":{}}}],["changepassword(userid",{"_index":561,"title":{},"body":{"injectables/UserService.html":{}}}],["charlie",{"_index":362,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["charlie@example.com",{"_index":363,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["check",{"_index":710,"title":{},"body":{"index.html":{}}}],["checkdatabase",{"_index":265,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["chua",{"_index":342,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["class",{"_index":29,"title":{"classes/AuthDTO.html":{},"classes/UserDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":157,"title":{},"body":{"classes/AuthDTO.html":{},"classes/UserDTO.html":{},"overview.html":{}}}],["client",{"_index":299,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["client.connect",{"_index":315,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["client.end",{"_index":335,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["client.query",{"_index":316,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["client.query(`create",{"_index":323,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["cloud",{"_index":685,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":237,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":238,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":239,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":548,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":549,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":550,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["co",{"_index":339,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["column",{"_index":458,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":455,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":449,"title":{},"body":{"entities/User.html":{}}}],["compile",{"_index":688,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('username",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('lỗi",{"_index":330,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["console.log(\"1",{"_index":439,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log(\"jwt",{"_index":407,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["console.log(\"path",{"_index":91,"title":{},"body":{"injectables/AppService.html":{}}}],["console.log('database",{"_index":349,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["console.log(`database",{"_index":324,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["console.log(req.user",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["constructor(dbservice",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["constructor(id",{"_index":539,"title":{},"body":{"classes/UserDTO.html":{}}}],["constructor(jwtservice",{"_index":393,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["constructor(private",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["constructor(roles",{"_index":442,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(userrepository",{"_index":275,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["context",{"_index":398,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":404,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('user",{"_index":505,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":606,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":266,"title":{},"body":{"injectables/DatabaseService.html":{},"index.html":{}}}],["create(user",{"_index":280,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["credentials",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["công",{"_index":327,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["daisy",{"_index":366,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["daisy@example.com",{"_index":367,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["data",{"_index":596,"title":{},"body":{"injectables/UserService.html":{}}}],["data.map",{"_index":604,"title":{},"body":{"injectables/UserService.html":{}}}],["data.partner_id",{"_index":602,"title":{},"body":{"injectables/UserService.html":{}}}],["data.role",{"_index":601,"title":{},"body":{"injectables/UserService.html":{}}}],["database",{"_index":247,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"index.html":{}}}],["database.service",{"_index":244,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["database/database.module.ts",{"_index":684,"title":{},"body":{"index.html":{}}}],["databasemodule",{"_index":54,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseservice",{"_index":188,"title":{"injectables/DatabaseService.html":{}},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["datname",{"_index":320,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["db_host=localhost",{"_index":673,"title":{},"body":{"index.html":{}}}],["db_name=user_service",{"_index":677,"title":{},"body":{"index.html":{}}}],["db_password=your_password",{"_index":676,"title":{},"body":{"index.html":{}}}],["db_port=5432",{"_index":674,"title":{},"body":{"index.html":{}}}],["db_username=your_username",{"_index":675,"title":{},"body":{"index.html":{}}}],["dbname",{"_index":314,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["dbservice",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["declarations",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":463,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":44,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":659,"title":{},"body":{"index.html":{},"properties.html":{}}}],["detail",{"_index":721,"title":{},"body":{"index.html":{}}}],["development",{"_index":690,"title":{},"body":{"index.html":{}}}],["dinh",{"_index":746,"title":{},"body":{"properties.html":{}}}],["disabled",{"_index":711,"title":{},"body":{"index.html":{}}}],["document",{"_index":733,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["documentpath",{"_index":88,"title":{},"body":{"injectables/AppService.html":{}}}],["dotenv",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos",{"_index":728,"title":{},"body":{"index.html":{}}}],["du",{"_index":340,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["dung",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["edit",{"_index":527,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["editprofile",{"_index":467,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["editprofile(newusername",{"_index":477,"title":{},"body":{"controllers/UserController.html":{}}}],["editprofile(userid",{"_index":565,"title":{},"body":{"injectables/UserService.html":{}}}],["edituser",{"_index":468,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser(id",{"_index":482,"title":{},"body":{"controllers/UserController.html":{}}}],["edituserprofile",{"_index":556,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserprofile(userid",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["edward",{"_index":368,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["edward@example.com",{"_index":369,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["email",{"_index":286,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["email,role,active",{"_index":512,"title":{},"body":{"controllers/UserController.html":{}}}],["entities",{"_index":258,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":447,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["enumerations",{"_index":651,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["env.example",{"_index":671,"title":{},"body":{"index.html":{}}}],["error",{"_index":102,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{}}}],["error('documentation",{"_index":105,"title":{},"body":{"injectables/AppService.html":{}}}],["error('invalid",{"_index":598,"title":{},"body":{"injectables/UserService.html":{}}}],["example",{"_index":668,"title":{},"body":{"index.html":{}}}],["except",{"_index":724,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":396,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["existingemail",{"_index":590,"title":{},"body":{"injectables/UserService.html":{}}}],["existingemail.id",{"_index":592,"title":{},"body":{"injectables/UserService.html":{}}}],["existinguser",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["existinguser.id",{"_index":587,"title":{},"body":{"injectables/UserService.html":{}}}],["existingusers",{"_index":347,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["existingusers.length",{"_index":348,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["exists",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["expired",{"_index":418,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["expiresin",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["export",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["extends",{"_index":420,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":427,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":432,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":262,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["finally",{"_index":334,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findall",{"_index":267,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyemail",{"_index":268,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyemail(email",{"_index":284,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyuserid",{"_index":269,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyuserid(id",{"_index":287,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyusername",{"_index":270,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyusername(username",{"_index":291,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["finish",{"_index":732,"title":{},"body":{"index.html":{}}}],["fiona",{"_index":370,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["fiona@example.com",{"_index":371,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["forbiddenexception",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["forbiddenexception('invalid",{"_index":417,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["forbiddenexception('no",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('please",{"_index":408,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["found",{"_index":106,"title":{},"body":{"injectables/AppService.html":{},"injectables/UserService.html":{}}}],["frontend",{"_index":734,"title":{},"body":{"index.html":{}}}],["fs",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["function",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":702,"title":{},"body":{"index.html":{}}}],["functions",{"_index":655,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["george",{"_index":373,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["george@example.com",{"_index":374,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["get('/:id",{"_index":495,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/list",{"_index":508,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/profile",{"_index":529,"title":{},"body":{"controllers/UserController.html":{}}}],["get('partner_id/:id",{"_index":498,"title":{},"body":{"controllers/UserController.html":{}}}],["getall",{"_index":469,"title":{},"body":{"controllers/UserController.html":{}}}],["getalluser",{"_index":557,"title":{},"body":{"injectables/UserService.html":{}}}],["getdocumentation",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getdocumentation(@res",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["getdocumentation(res",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["getlist",{"_index":470,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["getprofile(@req",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["getting",{"_index":657,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":471,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@param('id",{"_index":534,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(id",{"_index":494,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserinfo",{"_index":558,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserinfo(userid",{"_index":570,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserpartnerid",{"_index":472,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getuserpartnerid(@param('id",{"_index":536,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserpartnerid(id",{"_index":497,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getuserprofile",{"_index":559,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserprofile(userid",{"_index":573,"title":{},"body":{"injectables/UserService.html":{}}}],["guard",{"_index":388,"title":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["guards",{"_index":389,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["handle",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["hannah",{"_index":375,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["hannah@example.com",{"_index":376,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["hashedpassword",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{}}}],["hello",{"_index":107,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["host",{"_index":250,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"index.html":{}}}],["id",{"_index":290,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["if(!user.isactive",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(user.role",{"_index":595,"title":{},"body":{"injectables/UserService.html":{}}}],["ignoreexpiration",{"_index":433,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implement",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["implements",{"_index":303,"title":{},"body":{"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{}}}],["included",{"_index":725,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":582,"title":{},"body":{"injectables/UserService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":89,"title":{},"body":{"injectables/AppService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["information",{"_index":511,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["informations",{"_index":722,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":79,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":80,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":302,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["injectrepository(user",{"_index":304,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["install",{"_index":666,"title":{},"body":{"index.html":{}}}],["install2",{"_index":670,"title":{},"body":{"index.html":{}}}],["isactive",{"_index":358,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"index.html":{}}}],["isglobal",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["ispasswordvalid",{"_index":579,"title":{},"body":{"injectables/UserService.html":{}}}],["ivan",{"_index":377,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["ivan@example.com",{"_index":378,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["join",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["join(__dirname",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["julia",{"_index":380,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["julia@example.com",{"_index":381,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["jwt",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_key",{"_index":678,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":134,"title":{"guards/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":431,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtservice",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["jwtstrategy",{"_index":167,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["khi",{"_index":331,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["kiem",{"_index":336,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["kiểm",{"_index":332,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["legend",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":742,"title":{},"body":{"properties.html":{}}}],["lieu",{"_index":341,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["list",{"_index":506,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["local",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["localhost",{"_index":252,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"index.html":{}}}],["logging",{"_index":261,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["login",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["login(@body",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(authdto",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(userdto",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["manage",{"_index":510,"title":{},"body":{"controllers/UserController.html":{}}}],["matching",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":346,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["metadata",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":700,"title":{},"body":{"index.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":650,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":693,"title":{},"body":{"index.html":{}}}],["modify",{"_index":683,"title":{},"body":{"index.html":{}}}],["module",{"_index":41,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":43,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mount",{"_index":385,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["nam",{"_index":747,"title":{},"body":{"properties.html":{}}}],["name",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":660,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":242,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["neu",{"_index":343,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["new",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newemail",{"_index":478,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newisactive",{"_index":485,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newpartnerid",{"_index":484,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newpartnerid,role",{"_index":599,"title":{},"body":{"injectables/UserService.html":{}}}],["newpassword",{"_index":474,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newrole",{"_index":483,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newuser",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{}}}],["newusername",{"_index":481,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["nguyen",{"_index":745,"title":{},"body":{"properties.html":{}}}],["note",{"_index":703,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":575,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception('user",{"_index":578,"title":{},"body":{"injectables/UserService.html":{}}}],["npm",{"_index":669,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":450,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":288,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["nội",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["observable",{"_index":401,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["oldpassword",{"_index":562,"title":{},"body":{"injectables/UserService.html":{}}}],["onapplicationbootstrap",{"_index":271,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["optional",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["order",{"_index":306,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["out",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":739,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":624,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":667,"title":{},"body":{"index.html":{}}}],["param",{"_index":501,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["parseint(process.env.db_port",{"_index":254,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["partial",{"_index":281,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["partner",{"_index":364,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["partner'].includes(newrole",{"_index":597,"title":{},"body":{"injectables/UserService.html":{}}}],["partner_id",{"_index":357,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"index.html":{}}}],["partner_id:1001",{"_index":365,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["passport",{"_index":429,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":426,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":421,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":160,"title":{},"body":{"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["password,isactive",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["path",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["payload",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":437,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":435,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.role",{"_index":438,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":436,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["pg",{"_index":300,"title":{},"body":{"injectables/DatabaseService.html":{},"dependencies.html":{}}}],["pg_database",{"_index":319,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["port",{"_index":253,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"index.html":{}}}],["post",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["post('login",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('profile",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgre",{"_index":686,"title":{},"body":{"index.html":{}}}],["postgres",{"_index":246,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgressql",{"_index":681,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":452,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["process.env.db_host",{"_index":251,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["process.env.db_name",{"_index":248,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["process.env.db_password",{"_index":313,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["process.env.db_username",{"_index":256,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["process.env.jwt_key",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{}}}],["production",{"_index":695,"title":{},"body":{"index.html":{}}}],["profile",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"index.html":{}}}],["project",{"_index":664,"title":{},"body":{"index.html":{}}}],["promise",{"_index":399,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["properties",{"_index":159,"title":{"properties.html":{}},"body":{"classes/AuthDTO.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"properties.html":{}}}],["provide",{"_index":409,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["providers",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["put",{"_index":500,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["put('/change",{"_index":523,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/edit",{"_index":514,"title":{},"body":{"controllers/UserController.html":{}}}],["readfilesync",{"_index":86,"title":{},"body":{"injectables/AppService.html":{}}}],["readfilesync(documentpath",{"_index":98,"title":{},"body":{"injectables/AppService.html":{}}}],["readonly",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["register(@body",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(authdto",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(authdto:authdto",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":272,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["remove(id",{"_index":294,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["replaced",{"_index":712,"title":{},"body":{"index.html":{}}}],["repository",{"_index":276,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["req",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["req.user",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":403,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["request.headers.authorization.split",{"_index":406,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["request.user",{"_index":416,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["require('dotenv').config",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{}}}],["required",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["res",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{}}}],["res.rowcount",{"_index":321,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["res.send(documentation",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["res.setheader('content",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["rest",{"_index":605,"title":{},"body":{"injectables/UserService.html":{}}}],["results",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role",{"_index":356,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["role=partner",{"_index":717,"title":{},"body":{"index.html":{}}}],["roles",{"_index":444,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(admin,partner,user",{"_index":576,"title":{},"body":{"injectables/UserService.html":{}}}],["roles_key",{"_index":620,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":440,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["rolesguard())@useguards(jwtauthguard)@get('/list",{"_index":490,"title":{},"body":{"controllers/UserController.html":{}}}],["rolesguard())@useguards(jwtauthguard)@put('/edit",{"_index":487,"title":{},"body":{"controllers/UserController.html":{}}}],["rolesguard(['admin",{"_index":507,"title":{},"body":{"controllers/UserController.html":{}}}],["rootpath",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":727,"title":{},"body":{"index.html":{}}}],["run",{"_index":689,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":402,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["sample",{"_index":383,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["sampleusers",{"_index":353,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["secret",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"guards/JwtAuthGuard.html":{},"modules/UserModule.html":{}}}],["secretorkey",{"_index":434,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["seeddatabase",{"_index":273,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["seeded",{"_index":350,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["select",{"_index":317,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["serveroot",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":661,"title":{},"body":{"index.html":{},"properties.html":{}}}],["setmetadata(roles_key",{"_index":751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":665,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["specific",{"_index":533,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["src/.../main.ts",{"_index":656,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.enum.ts",{"_index":652,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:10",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":81,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:18",{"_index":85,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":83,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:26",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:36",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:55",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:7",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt",{"_index":390,"title":{},"body":{"guards/JwtAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy",{"_index":554,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":425,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":423,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/database/database.module",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["src/database/database.module.ts",{"_index":240,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.service",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["src/database/database.service.ts",{"_index":264,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["src/database/database.service.ts:103",{"_index":293,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:11",{"_index":277,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:16",{"_index":283,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:24",{"_index":292,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:27",{"_index":289,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:30",{"_index":285,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:35",{"_index":282,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:40",{"_index":298,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:44",{"_index":295,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:47",{"_index":279,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:76",{"_index":296,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/dto",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/dto/authdto.ts",{"_index":158,"title":{},"body":{"classes/AuthDTO.html":{},"coverage.html":{}}}],["src/dto/authdto.ts:2",{"_index":163,"title":{},"body":{"classes/AuthDTO.html":{}}}],["src/dto/authdto.ts:3",{"_index":162,"title":{},"body":{"classes/AuthDTO.html":{}}}],["src/dto/userdto.ts",{"_index":538,"title":{},"body":{"classes/UserDTO.html":{},"coverage.html":{}}}],["src/dto/userdto.ts:2",{"_index":542,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/dto/userdto.ts:3",{"_index":543,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/dto/userdto.ts:4",{"_index":541,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/dto/userdto.ts:5",{"_index":540,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/main.ts",{"_index":615,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/role.enum.ts",{"_index":653,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/roles.decorator.ts",{"_index":618,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/roles.guards",{"_index":504,"title":{},"body":{"controllers/UserController.html":{}}}],["src/roles.guards.ts",{"_index":441,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/roles.guards.ts:5",{"_index":443,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/roles.guards.ts:7",{"_index":445,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/user/user.controller.ts",{"_index":465,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:26",{"_index":491,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:33",{"_index":488,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:50",{"_index":476,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:60",{"_index":480,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:70",{"_index":493,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:77",{"_index":489,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:82",{"_index":496,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:87",{"_index":499,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":448,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:12",{"_index":451,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:15",{"_index":459,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:18",{"_index":460,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:21",{"_index":457,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:24",{"_index":456,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:6",{"_index":453,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:9",{"_index":461,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.module.ts",{"_index":551,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":555,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:13",{"_index":563,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:27",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:42",{"_index":574,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:58",{"_index":568,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:6",{"_index":560,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:77",{"_index":571,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:83",{"_index":572,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:90",{"_index":569,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":691,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":694,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":696,"title":{},"body":{"index.html":{}}}],["started",{"_index":658,"title":{"index.html":{}},"body":{}}],["statements",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["status",{"_index":513,"title":{},"body":{"controllers/UserController.html":{}}}],["strategy",{"_index":428,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"classes/AuthDTO.html":{},"injectables/DatabaseService.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.db_password",{"_index":257,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["stt",{"_index":699,"title":{},"body":{"index.html":{}}}],["super",{"_index":430,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":736,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":737,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":260,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["system",{"_index":663,"title":{},"body":{"index.html":{},"properties.html":{}}}],["table",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":589,"title":{},"body":{"injectables/UserService.html":{}}}],["tao",{"_index":345,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["tasks",{"_index":726,"title":{},"body":{"index.html":{}}}],["temp",{"_index":532,"title":{},"body":{"controllers/UserController.html":{}}}],["text/html",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["thi",{"_index":344,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.appservice.getdocumentation",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(user",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(authdto",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(authdto",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.checkdatabase",{"_index":386,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.dbservice.create",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.dbservice.findall",{"_index":603,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.findbyemail(newemail",{"_index":591,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.findbyuserid(id",{"_index":600,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.findbyuserid(payload.id",{"_index":412,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["this.dbservice.findbyuserid(userid",{"_index":577,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.findbyusername(authdto.username",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.dbservice.findbyusername(newusername",{"_index":585,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.update(userid",{"_index":584,"title":{},"body":{"injectables/UserService.html":{}}}],["this.email",{"_index":546,"title":{},"body":{"classes/UserDTO.html":{}}}],["this.id",{"_index":544,"title":{},"body":{"classes/UserDTO.html":{}}}],["this.jwtservice.sign(payload",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":411,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["this.role",{"_index":547,"title":{},"body":{"classes/UserDTO.html":{}}}],["this.roles.includes(request.user.role.tolowercase",{"_index":446,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.seeddatabase",{"_index":387,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.username",{"_index":545,"title":{},"body":{"classes/UserDTO.html":{}}}],["this.userrepository.create(user",{"_index":309,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.delete(id",{"_index":312,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.find",{"_index":305,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.findone",{"_index":308,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.save(newuser",{"_index":310,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.save(sampleusers",{"_index":382,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.update(id",{"_index":311,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userservice.changepassword(req.user.id",{"_index":526,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.editprofile(req.user.id,newusername",{"_index":528,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.edituserprofile(id,newusername",{"_index":521,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getalluser",{"_index":509,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserinfo(id",{"_index":535,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserpartnerid(id",{"_index":537,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserprofile(req.user.id",{"_index":530,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["thuan",{"_index":748,"title":{},"body":{"properties.html":{}}}],["thành",{"_index":326,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["token",{"_index":405,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["tr",{"_index":96,"title":{},"body":{"injectables/AppService.html":{}}}],["tra",{"_index":337,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["tra/tạo",{"_index":333,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["transformer",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"entities/User.html":{}}}],["try",{"_index":90,"title":{},"body":{"injectables/AppService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{}}}],["type",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":301,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":241,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":263,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":245,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["tại",{"_index":329,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["tạo",{"_index":325,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["tồn",{"_index":328,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["unauthorizedexception",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":462,"title":{},"body":{"entities/User.html":{}}}],["unknown",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":743,"title":{},"body":{"properties.html":{}}}],["update",{"_index":274,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["update(id",{"_index":297,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["url",{"_index":701,"title":{},"body":{"index.html":{}}}],["use",{"_index":594,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["useguards",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@get('/profile",{"_index":492,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@post('profile",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@put('/change",{"_index":475,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@put('/edit",{"_index":479,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(new",{"_index":486,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":146,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["user.controller",{"_index":552,"title":{},"body":{"modules/UserModule.html":{}}}],["user.entity",{"_index":553,"title":{},"body":{"modules/UserModule.html":{}}}],["user.id",{"_index":586,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":503,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/:id",{"_index":715,"title":{},"body":{"index.html":{}}}],["user/change",{"_index":719,"title":{},"body":{"index.html":{}}}],["user/edit",{"_index":718,"title":{},"body":{"index.html":{}}}],["user/list",{"_index":720,"title":{},"body":{"index.html":{}}}],["user/partner_id/:id",{"_index":716,"title":{},"body":{"index.html":{}}}],["user/profile",{"_index":713,"title":{},"body":{"index.html":{}}}],["user/user.entity",{"_index":243,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["user/user.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["user_api",{"_index":714,"title":{},"body":{"index.html":{}}}],["user_service",{"_index":249,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["usercontroller",{"_index":464,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":137,"title":{"classes/UserDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserDTO.html":{},"coverage.html":{}}}],["userid",{"_index":564,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":55,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":161,"title":{},"body":{"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":278,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["users",{"_index":384,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["userservice",{"_index":502,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwithoutpassword",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["userwithoutpassword.email",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwithoutpassword.id",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwithoutpassword.role",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwithoutpassword.username",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["using",{"_index":680,"title":{},"body":{"index.html":{}}}],["utf",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["v",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["validate",{"_index":422,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":424,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(authdto",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(authdto:authdto",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["value",{"_index":654,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":749,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify",{"_index":410,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["version",{"_index":740,"title":{},"body":{"properties.html":{}}}],["void",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["vou",{"_index":662,"title":{},"body":{"index.html":{},"properties.html":{}}}],["watch",{"_index":692,"title":{},"body":{"index.html":{}}}],["world",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["xem",{"_index":338,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["your_jwt_key3",{"_index":679,"title":{},"body":{"index.html":{}}}],["zero",{"_index":351,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["zoom",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getDocumentation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDocumentation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDocumentation(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { Response } from 'express';\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n\n  @Get()\n  getDocumentation(@Res() res: Response): void {\n    const documentation = this.appService.getDocumentation();\n    res.setHeader('Content-Type', 'text/html');\n    res.send(documentation); \n  }\n}\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { DatabaseModule } from './database/database.module';\nimport { UserModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n@Module({\n  imports: [ServeStaticModule.forRoot({\n    rootPath: join(__dirname, '..', 'documentation'), \n    serveRoot: '/', \n  }),\n    DatabaseModule,\n  ConfigModule.forRoot({ isGlobal: true }),\n    UserModule,\n    AuthModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDocumentation\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDocumentation\n                        \n                    \n                \n            \n            \n                \ngetDocumentation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { join } from 'path';\nimport { readFileSync } from 'fs';\n\n@Injectable()\nexport class AppService {\n  getDocumentation(): string {\n    const documentPath = join(__dirname, '..', 'documentation', 'index.html');\n    try {\n      console.log(\"path = \", documentPath);\n      // Đọc nội dung file và trả về\n      return readFileSync(documentPath, 'utf-8');\n    } catch (error) {\n      throw new Error('Documentation file not found.');\n    }\n  }\n\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(authDTO: AuthDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDTO\n                                            \n                                                            AuthDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(authDTO: AuthDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDTO\n                                            \n                                                            AuthDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Req, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport { AuthDTO, UserDTO } from './../DTO';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  async register(@Body() authDTO: AuthDTO ) {\n    // required implement handle error and verification here\n    const user = await this.authService.register(authDTO);\n    return this.authService.login(user);\n  }\n\n  @Post('login')\n  async login(@Body() authDTO: AuthDTO ) {\n    \n    const user = await this.authService.validateUser(authDTO);\n    return this.authService.login(user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('profile')\n  async getProfile(@Req() req: any) {\n    // console.log(req.user);\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDTO.html":{"url":"classes/AuthDTO.html","title":"class - AuthDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/DTO/authDTO.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/authDTO.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/authDTO.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AuthDTO{\n    username: string\n    password: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { DatabaseModule } from 'src/database/database.module';\nrequire('dotenv').config();\n@Module({\n  imports: [\n    DatabaseModule,\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_KEY, // .env\n      signOptions: { expiresIn: '1h' },\n    }),\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dbService: DatabaseService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dbService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(userDTO: UserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userDTO\n                                            \n                                                            UserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(authDTO: AuthDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDTO\n                                            \n                                                            AuthDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(authDTO: AuthDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDTO\n                                            \n                                                            AuthDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException, ConflictException, ForbiddenException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { AuthDTO,UserDTO } from 'src/DTO';\nimport { DatabaseService } from 'src/database/database.service';\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly dbService: DatabaseService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async register(authDTO:AuthDTO) {\n    const existingUser = await this.dbService.findByUsername(authDTO.username);\n    if (existingUser) {\n      throw new ConflictException('Username already exists');\n    }\n\n    const hashedPassword = await bcrypt.hash(authDTO.password, 10);\n    const newUser = await this.dbService.create({\n      username: authDTO.username,\n      password: hashedPassword,\n    });\n\n\n    const { password: _, ...userWithoutPassword } = newUser;\n    const userDTO = new UserDTO(\n      userWithoutPassword.id,\n      userWithoutPassword.username,\n      userWithoutPassword.email,\n      userWithoutPassword.role\n    );\n    return userDTO;\n  }\n\n  async validateUser(authDTO:AuthDTO) {\n    const user = await this.dbService.findByUsername(authDTO.username);\n    if (!user || !(await bcrypt.compare(authDTO.password, user.password))) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n    if(!user.isActive){\n      throw new ForbiddenException('No permission to access this profile!');\n    }\n\n    const { password,isActive, ...userWithoutPassword } = user;\n    const userDTO = new UserDTO(\n      userWithoutPassword.id,\n      userWithoutPassword.username,\n      userWithoutPassword.email,\n      userWithoutPassword.role\n    );\n    return userDTO;\n  }\n\n  async login(userDTO: UserDTO) {\n    const payload = { ...userDTO };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\n\nDatabaseService \n\nDatabaseService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/user.entity';\nimport { DatabaseService } from './database.service';\nrequire('dotenv').config();\n\n\n@Module({\n    imports: [TypeOrmModule.forRoot({\n        type: 'postgres',\n        database: process.env.DB_NAME || 'user_service', \n        host: process.env.DB_HOST || 'localhost',\n        port: parseInt(process.env.DB_PORT, 10) || 5432,\n        username: process.env.DB_USERNAME,\n        password: String(process.env.DB_PASSWORD),\n        entities: [User],\n        autoLoadEntities: true,\n        synchronize: true,\n        logging: false, \n    }), TypeOrmModule.forFeature([User])],\n    providers: [DatabaseService],\n    controllers: [],\n    exports: [DatabaseService]\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseService.html":{"url":"injectables/DatabaseService.html","title":"injectable - DatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/database.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkDatabase\n                            \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findByEmail\n                            \n                            \n                                findByUserID\n                            \n                            \n                                findByUsername\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                seedDatabase\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/database/database.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkDatabase\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkDatabase()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByEmail\n                        \n                    \n                \n            \n            \n                \nfindByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByUserID\n                        \n                    \n                \n            \n            \n                \nfindByUserID(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByUsername\n                        \n                    \n                \n            \n            \n                \nfindByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        seedDatabase\n                        \n                    \n                \n            \n            \n                \n                        \n                    seedDatabase()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, user: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { Client } from 'pg';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user/user.entity';\nimport * as bcrypt from 'bcrypt';\n\nrequire('dotenv').config();\n\n@Injectable()\nexport class DatabaseService implements OnApplicationBootstrap {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) { }\n  findAll() {\n    return this.userRepository.find({\n      order: {\n        id: 'ASC',\n      },\n    });\n  }\n\n  findByUsername(username: string) {\n    return this.userRepository.findOne({ where: { username } });\n  }\n  findByUserID(id: number) {\n    return this.userRepository.findOne({ where: { id } });\n  }\n  findByEmail(email: string) {\n    return this.userRepository.findOne({ where: { email } });\n  }\n\n\n  create(user: Partial) {\n    const newUser = this.userRepository.create(user);\n    return this.userRepository.save(newUser);\n  }\n\n  update(id: number, user: Partial) {\n    return this.userRepository.update(id, user);\n  }\n\n  remove(id: number) {\n    return this.userRepository.delete(id);\n  }\n  private async checkDatabase() {\n    const client = new Client({\n      user: process.env.DB_USERNAME,\n      password: process.env.DB_PASSWORD,\n      host: process.env.DB_HOST || 'localhost',\n      port: parseInt(process.env.DB_PORT || '5432', 10),\n    });\n\n    const dbName = process.env.DB_NAME || 'user_service';\n\n    try {\n      await client.connect();\n      const res = await client.query(\n        `SELECT 1 FROM pg_database WHERE datname = $1`,\n        [dbName]\n      );\n\n      if (res.rowCount === 0) {\n        await client.query(`CREATE DATABASE ${dbName}`);\n        console.log(`Database \"${dbName}\" đã được tạo thành công!`);\n      } else {\n        console.log(`Database \"${dbName}\" đã tồn tại.`);\n      }\n    } catch (error) {\n      console.error('Lỗi khi kiểm tra/tạo database:', error);\n    } finally {\n      await client.end();\n    }\n  }\n  async seedDatabase() {\n    // Kiem tra xem co du lieu chua, neu chua thi tao du lieu mau\n    const existingUsers = await this.userRepository.find();\n    if (existingUsers.length > 0) {\n      console.log('Database already seeded.');\n      return;\n    }\n    const zero = 0;\n    const hashedPassword = await bcrypt.hash(\"password123\", 10);\n    //tao 10 du lieu mau\n    const sampleUsers = [\n      { username: 'Alice', email: 'alice@example.com', password: hashedPassword, role: 'user', partner_id: zero , isActive: true },\n      { username: 'Bob', email: 'bob@example.com', password: hashedPassword, role: 'admin', partner_id: zero, isActive: true },\n      { username: 'Charlie', email: 'charlie@example.com', password: hashedPassword, role: 'partner', partner_id:1001, isActive: false },\n      { username: 'Daisy', email: 'daisy@example.com', password: hashedPassword, role: 'user', partner_id: zero, isActive: true },\n      { username: 'Edward', email: 'edward@example.com', password: hashedPassword, role: 'user', partner_id: zero , isActive: true },\n      { username: 'Fiona', email: 'fiona@example.com', password: hashedPassword, role: 'partner', partner_id: 1001, isActive: true },\n      { username: 'George', email: 'george@example.com', password: hashedPassword, role: 'user', partner_id: zero, isActive: true },\n      { username: 'Hannah', email: 'hannah@example.com', password: hashedPassword, role: 'user', partner_id: zero, isActive: true },\n      { username: 'Ivan', email: 'ivan@example.com', password: hashedPassword, role: 'partner', partner_id: 1002, isActive: false },\n      { username: 'Julia', email: 'julia@example.com', password: hashedPassword, role: 'user', partner_id: zero, isActive: true },\n    ];\n    await this.userRepository.save(sampleUsers);\n    console.log('Database seeded with 10 sample users.');\n  }\n\n  //mount\n  async onApplicationBootstrap() {\n    await this.checkDatabase();\n    await this.seedDatabase();\n  }\n}\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/JwtAuthGuard.html":{"url":"guards/JwtAuthGuard.html","title":"guard - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/jwt-auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, dbService: DatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dbService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, ForbiddenException, BadRequestException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\nimport { DatabaseService } from 'src/database/database.service';\nrequire('dotenv').config();\n@Injectable()\nexport class JwtAuthGuard implements CanActivate {\n    constructor(private jwtService: JwtService, private dbService: DatabaseService) { };\n    async canActivate(\n        context: ExecutionContext,\n    ): Promise {\n        const request = context.switchToHttp().getRequest();\n        try {\n             //get token\n        const token = request.headers.authorization.split(' ')[1];\n        // console.log(\"jwt auth guard: token = \", token)\n        if (!token) {\n            throw new ForbiddenException('Please provide access token');\n        }\n        // verify token\n        const payload = await this.jwtService.verifyAsync(token, {\n            secret: process.env.JWT_KEY,\n        })\n        // console.log(\"jwt auth guard: payload = \", payload)\n\n        //\n        const user = await this.dbService.findByUserID(payload.id);\n        if (!user) {\n            throw new BadRequestException(\"User not belong to token!\")\n        }\n        // console.log(\"jwt auth guard: user = \", user)\n        const { password,isActive, ...userWithoutPassword }=user;\n        //bind user to request\n        request.user = userWithoutPassword;\n        } catch (error) {\n            throw new ForbiddenException('Invalid token or expired')\n        }\n        return true;\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: UserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UserDTO } from 'src/DTO';\nrequire('dotenv').config();\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_KEY,\n    });\n  }\n\n  async validate(payload: UserDTO) {\n     const user ={ id: payload.id, username: payload.username, email: payload.email, role: payload.role};\n     console.log(\"1\");\n     return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/roles.guards.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(roles: string[])\n                    \n                \n                        \n                            \n                                Defined in src/roles.guards.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roles\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles.guards.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, ForbiddenException, BadRequestException } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nrequire('dotenv').config();\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor(private roles: string[] ){};\n    async canActivate(\n        context: ExecutionContext,\n    ): Promise {\n        const request = context.switchToHttp().getRequest();\n        return this.roles.includes(request.user.role.toLowerCase());\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                partner_id\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        partner_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({unique: true})\n  username: string;\n\n  @Column({ unique: true, nullable: true  })\n  email: string;\n\n  @Column()\n  password: string;\n\n  @Column({ default: 'user' })\n  role: string; // 'user', 'partner', 'admin'\n\n  @Column({default: 0})\n  partner_id: number; \n\n  @Column({ default: true })\n  isActive: boolean;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                editProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                editUser\n                            \n                            \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getList\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    Async\n                                getUser\n                            \n                            \n                                    \n                                    Async\n                                getUserPartnerID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(password: string, newPassword: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put('/change-password')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        editProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    editProfile(newUsername: string, newEmail: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put('/edit-profile')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newUsername\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUser(id: number, newUsername: string, newEmail: string, newRole: string, newPartnerid, newIsActive: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(new RolesGuard())@UseGuards(JwtAuthGuard)@Put('/edit-user')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newUsername\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newRole\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPartnerid\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newIsActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(new RolesGuard())@UseGuards(JwtAuthGuard)@Get('/list')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('/profile')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserPartnerID\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserPartnerID(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('partner_id/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { \n  Controller, \n  UseGuards, \n  Get, \n  Post, \n  Put, \n  Body, \n  Param, \n  Req, \n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { RolesGuard } from 'src/roles.guards';\n\n\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  //// Admin-only\n  // get user list\n  @UseGuards(new RolesGuard(['admin']))\n  @UseGuards(JwtAuthGuard)\n  @Get('/list')\n  async getList(){\n    return this.userService.getAllUser();\n  } \n  //manage user information (username, email,role,active status)\n  @UseGuards(new RolesGuard(['admin']))\n  @UseGuards(JwtAuthGuard)\n  @Put('/edit-user')\n  async editUser(\n    @Body('id') id: number,\n    @Body('username') newUsername: string,\n    @Body('email') newEmail: string,\n    @Body('Role') newRole: string,\n    @Body('partner_id') newPartnerid,\n    @Body('isActive') newIsActive: boolean,\n\n  ) {\n\n    return this.userService.editUserProfile(id,newUsername, newEmail, newRole, newPartnerid, newIsActive);\n  }\n\n\n  //change password\n  @UseGuards(JwtAuthGuard)\n  @Put('/change-password')\n  async changePassword(\n    @Body('password') password: string,\n    @Body('newPassword') newPassword: string,\n    @Req() req: any,\n  ) {\n    return this.userService.changePassword(req.user.id, password, newPassword);\n  }\n  //edit profile (username, email)\n  @UseGuards(JwtAuthGuard)\n  @Put('/edit-profile')\n  async editProfile(\n    @Body('username') newUsername: string,\n    @Body('email') newEmail: string,\n    @Req() req: any,\n  ) {\n    return this.userService.editProfile(req.user.id,newUsername, newEmail);\n  }\n  //user get their own profile\n  @UseGuards(JwtAuthGuard)\n  @Get('/profile')\n  async getProfile( @Req() req: any,){\n    return this.userService.getUserProfile(req.user.id)\n  }\n\n  //// API (temp)\n  //get all users information\n  @Get('/')\n  async getAll(){\n    return this.userService.getAllUser();\n  }\n  // get information of a specific user\n  @Get('/:id')\n  async getUser(@Param('id') id: number){\n    return this.userService.getUserInfo(id);\n  }\n\n  @Get('partner_id/:id')\n  async getUserPartnerID(@Param('id') id: number){\n    return this.userService.getUserPartnerID(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDTO.html":{"url":"classes/UserDTO.html","title":"class - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/DTO/userDTO.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                role\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number, username: string, email: string, role: string)\n                    \n                \n                        \n                            \n                                Defined in src/DTO/userDTO.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        role\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/userDTO.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/userDTO.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/userDTO.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/userDTO.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserDTO{\n    id: number\n    username: string\n    email: string\n    role: string\n    constructor(id: number, username: string, email: string, role: string) {\n        this.id = id;\n        this.username = username;\n        this.email = email;\n        this.role = role;\n      }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUserModule -->\n\nJwtStrategy->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { User } from './user.entity';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from 'src/auth/jwt.strategy';\nrequire('dotenv').config();\n@Module({\n  imports: [DatabaseModule, JwtModule.register({\n    secret: process.env.JWT_KEY, // .env\n    signOptions: { expiresIn: '1h' },\n  }), TypeOrmModule.forFeature([User])],\n  providers: [UserService, JwtStrategy],\n  controllers: [UserController],\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                editProfile\n                            \n                            \n                                    Async\n                                editUserProfile\n                            \n                            \n                                    Async\n                                getAllUser\n                            \n                            \n                                    Async\n                                getUserInfo\n                            \n                            \n                                    Async\n                                getUserPartnerID\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dbService: DatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dbService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: number, oldPassword: string, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                oldPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    editProfile(userId: number, newUsername: string, newEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newUsername\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUserProfile(userId: number, newUsername: string, newEmail: string, newRole: string, newPartnerid: number, newIsActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newUsername\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newRole\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPartnerid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newIsActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserInfo(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserPartnerID\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserPartnerID(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException, NotFoundException } from '@nestjs/common';\nimport { DatabaseService } from 'src/database/database.service';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UserService {\n\n\n  constructor(\n    private readonly dbService: DatabaseService,\n  ) { }\n  //all roles(admin,partner,user)\n  async changePassword(userId: number, oldPassword: string, newPassword: string) {\n    const user = await this.dbService.findByUserID(userId);\n    if (!user) {\n      throw new NotFoundException('User not found.');\n    }\n\n    const isPasswordValid = await bcrypt.compare(oldPassword, user.password);\n    if (!isPasswordValid) {\n      throw new BadRequestException('Your password is incorrect.');\n    }\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    const res = await this.dbService.update(userId, { password: hashedPassword });\n    return res;\n  }\n  async editProfile(userId: number, newUsername: string, newEmail: string) {\n    const user = await this.dbService.findByUserID(userId);\n    if (!user) {\n      throw new NotFoundException('User not found.');\n    }\n    const existingUser = await this.dbService.findByUsername(newUsername);\n    if (existingUser && user.id !== existingUser.id) {\n      throw new BadRequestException('Username is already taken.');\n    }\n    const existingEmail = await this.dbService.findByEmail(newEmail);\n    if (existingEmail && user.id !== existingEmail.id) {\n      throw new BadRequestException('Email is already in use.');\n    }\n    return this.dbService.update(userId, { username: newUsername, email: newEmail });\n  }\n  async getUserProfile(userId: number) {\n    const user = await this.dbService.findByUserID(userId);\n    if (!user) {\n      throw new NotFoundException('User not found.');\n    }\n    if(user.role != \"partner\") {\n      const { password, isActive, partner_id, ...data } = user;\n      return data;\n    }\n    else {\n      const { password, isActive, ...data } = user;\n      return data;\n    }\n\n  }\n  //admin\n  async editUserProfile(userId: number, newUsername: string, newEmail: string, newRole: string, newPartnerid: number, newIsActive: boolean) {\n    const user = await this.dbService.findByUserID(userId);\n    if (!user) {\n      throw new NotFoundException('User not found.');\n    }\n    const existingUser = await this.dbService.findByUsername(newUsername);\n    if (existingUser && user.id != existingUser.id) {\n      throw new BadRequestException('Username is already taken.');\n    }\n    const existingEmail = await this.dbService.findByEmail(newEmail);\n    if (existingEmail && user.id != existingEmail.id) {\n      throw new BadRequestException('Email is already in use.');\n    }\n\n    if (!['admin', 'user', 'partner'].includes(newRole)) {\n      throw new Error('Invalid role');\n    }\n    return this.dbService.update(userId, { username: newUsername, email: newEmail, isActive: newIsActive, partner_id: newPartnerid,role: newRole });\n  }\n  async getUserInfo(userId: number) {\n    const data = await this.dbService.findByUserID(userId);\n    const { password, ...user } = data;\n    return user;\n  }\n\n  async getUserPartnerID(id: number) {\n    const data = await this.dbService.findByUserID(id);\n    if (data.role != \"partner\"){\n      return 0;\n    }\n    return data.partner_id;\n  }\n  async getAllUser() {\n    const data = await this.dbService.findAll();\n    const Users = data.map(({ password, ...rest }) => rest);\n    return Users;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/DTO/authDTO.ts\n            \n            class\n            AuthDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/DTO/userDTO.ts\n            \n            class\n            UserDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            guard\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/database.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles.guards.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/serve-static : ^4.0.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.4.7\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 Partner\n                            \n                        \n                        \n                            \n                                Value : partner\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\n###[Nest] User service of VOU system\n\nProject setup\n1/ install packages\nExample :$ npm install2/ create your .env from .env.example\nExample :HOST = localhost\nPORT = 3000\nDB_HOST=localhost\nDB_PORT=5432\nDB_USERNAME=your_username\nDB_PASSWORD=your_password\nDB_NAME=user_service\nJWT_KEY = your_JWT_key3/ This service using postgresSQL. If you use another database, modify in file database/database.module.ts or setup a cloud Postgre service\n4/ Compile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prod\nAPIs:\nAPP:\n\n\n\nSTT\nMethod\nURL\nFunctionality\nNote\n\n\n\n\n1\nGET\n/\nDocumentation\n\n\n\n\nAUTH:\n\n\n\nSTT\nMethod\nURL\nFunctionality\nNote\n\n\n\n\n1\nPOST\nauth/register\nuser register account\n\n\n\n2\nPOST\nauth/login\nuser login\n\n\n\n3\nPOST\nauth/profile\ncheck profile\ndisabled, replaced with user/profile\n\n\n\nUSER_API:\n\n\n\nSTT\nMethod\nURL\nFunctionality\nNote\n\n\n\n\n1\nGET\nuser/\nget all users information\nno permission req\n\n\n2\nGET\nuser/:id\nget a specific user information\nno permission req\n\n\n3\nGET\nuser/partner_id/:id\nget user partner_id\nno permission req. role != partner => 0\n\n\n\nUSER:\n| 1   | GET    | user/profile          | get user own profile                           | req: login. role=partner =>partner_id   |\n| 2   | PUT    | user/edit-profile     | user edit their information                    | req: login                              |\n| 3   | PUT    | user/change-password  | user change their password                     | req: login                              |\n| 4   | GET    | user/list             | get user detail informations               | req: login as admin                     |\n| 5   | PUT    | user/edit-user        | edit user information except password          | req: login as admin, included role & isActive  |\nTASKS LIST:\n\n Database.\n create user module & routes.\n User entity.\n create auth module & routes.\n DTOs\n Authentication. (jwt)\n Authorization. (admin,partner,user)\n Finish UserModule.\n Document\n Admin FrontEnd\n API module -> included in User\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nDatabaseService \n\nDatabaseService \n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\nUserModule -->\n\nJwtStrategy->UserModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.1\n        \n            Description : user service of VOU system\n        \n            License : UNLICENSED\n        \n            Author : Nguyen Dinh Nam Thuan\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
