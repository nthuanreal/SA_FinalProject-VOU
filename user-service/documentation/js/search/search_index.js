var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.338,1,1.871]],["body/controllers/AppController.html",[0,2.052,1,2.87,2,1.456,3,0.546,4,0.546,5,0.41,6,2.997,7,0.546,8,1.513,9,3.812,10,3.641,11,5.359,12,2.257,13,0.039,14,0.873,15,3.641,16,1.19,17,1.19,18,0.889,19,1.075,20,3.599,21,1.19,22,4.63,23,0.978,24,0.699,25,2.509,26,2.997,27,2.997,28,0.546,29,0.287,30,2.004,31,2.004,32,3.641,33,1.316,34,2.004,35,3.641,36,3.641,37,3.641,38,3.641,39,0.03,40,0.03]],["title/modules/AppModule.html",[41,0.986,42,1.871]],["body/modules/AppModule.html",[1,2.878,2,1.636,3,0.452,4,0.452,5,0.34,13,0.04,23,1.087,24,0.579,25,2.644,26,2.482,28,0.452,29,0.238,34,1.66,39,0.026,40,0.026,41,1.517,42,3.608,43,1.336,44,1.336,45,1.66,46,1.66,47,1.336,48,2.556,49,1.66,50,2.482,51,2.482,52,2.482,53,2.954,54,2.379,55,2.644,56,2.252,57,1.66,58,1.66,59,3.015,60,2.536,61,3.015,62,2.482,63,3.015,64,3.015,65,3.015,66,3.015,67,3.015,68,2.482,69,2.482,70,2.482,71,2.482,72,3.015,73,3.015,74,2.482,75,3.015,76,3.015,77,3.015,78,1.66]],["title/injectables/AppService.html",[25,1.487,79,0.724]],["body/injectables/AppService.html",[3,0.504,4,0.504,5,0.552,7,0.504,8,1.437,9,4.281,13,0.04,14,1.055,21,1.437,23,0.941,24,0.646,25,2.167,28,0.504,29,0.265,33,1.215,34,1.851,39,0.028,40,0.028,70,2.768,71,2.768,74,2.768,79,1.055,80,1.656,81,2.768,82,5.2,83,3.362,84,1.879,85,3.362,86,3.362,87,3.362,88,4.398,89,3.362,90,2.084,91,3.362,92,2.768,93,3.362,94,3.362,95,4.398,96,3.362,97,1.589,98,3.362,99,3.362,100,3.362,101,2.084,102,1.851,103,2.084,104,1.656,105,3.362,106,2.768,107,3.362,108,3.362]],["title/controllers/AuthController.html",[0,1.338,109,1.871]],["body/controllers/AuthController.html",[0,1.234,2,1.113,3,0.418,4,0.418,5,0.313,7,0.418,8,1.265,12,2.761,13,0.04,14,1.068,16,1.455,17,1.455,18,0.855,19,1.315,21,1.455,23,0.924,24,0.535,28,0.418,29,0.219,30,1.533,31,1.533,33,1.4,39,0.025,40,0.025,97,1.609,102,1.533,109,2.401,110,2.292,111,2.292,112,1.968,113,2.225,114,3.188,115,2.738,116,2.738,117,2.292,118,2.784,119,2.784,120,3.148,121,2.451,122,2.784,123,3.135,124,3.873,125,2.784,126,2.292,127,3.873,128,2.784,129,1.968,130,2.292,131,2.292,132,2.194,133,2.292,134,1.533,135,1.726,136,2.292,137,1.372,138,1.968,139,2.784,140,2.784,141,2.784,142,2.784,143,2.784,144,2.784,145,2.784,146,0.744,147,2.132,148,2.784,149,3.873,150,2.784,151,2.784,152,2.292,153,2.784,154,2.784,155,2.784,156,2.784]],["title/classes/AuthDTO.html",[29,0.238,123,1.661]],["body/classes/AuthDTO.html",[3,0.626,4,0.626,5,0.47,7,0.626,13,0.037,14,1.209,18,0.968,28,0.626,29,0.329,39,0.033,40,0.033,84,2.032,123,2.774,157,2.951,158,3.437,159,2.774,160,2.165,161,1.957,162,4.174,163,4.174]],["title/modules/AuthModule.html",[41,0.986,53,1.661]],["body/modules/AuthModule.html",[2,1.695,3,0.477,4,0.477,5,0.358,13,0.04,23,1.068,24,0.61,28,0.477,29,0.251,39,0.027,40,0.027,41,1.558,43,1.409,44,1.409,45,1.75,46,1.75,47,1.409,48,2.625,49,1.75,53,3.182,54,2.415,56,2.333,57,1.75,58,1.75,60,2.628,109,2.956,132,2.685,133,2.617,164,2.617,165,2.617,166,3.179,167,2.685,168,3.179,169,2.617,170,1.75,171,4.239,172,2.247,173,3.179,174,3.179,175,2.617,176,1.409,177,2.617,178,2.247,179,1.971,180,2.247,181,2.617,182,2.617,183,2.617]],["title/injectables/AuthService.html",[79,0.724,132,1.487]],["body/injectables/AuthService.html",[3,0.343,4,0.343,5,0.258,7,0.343,8,1.1,13,0.04,14,1.056,16,1.438,17,1.438,18,0.845,19,1.3,21,1.304,23,0.901,24,0.439,28,0.343,29,0.18,31,1.853,33,1.919,39,0.022,40,0.022,79,0.807,80,1.127,97,1.443,103,2.475,104,2.311,113,2.123,115,2.379,116,2.379,121,2.197,123,2.7,126,1.884,132,1.658,137,2.697,138,1.618,146,0.767,147,2.582,160,1.346,161,0.827,170,1.26,184,1.884,185,3.366,186,1.492,187,1.884,188,1.76,189,4.174,190,2.288,191,2.379,192,3.366,193,2.288,194,2.288,195,2.288,196,2.288,197,2.288,198,2.288,199,1.618,200,1.618,201,1.419,202,2.288,203,1.618,204,2.086,205,2.288,206,2.771,207,3.366,208,2.288,209,1.618,210,2.288,211,2.379,212,2.288,213,1.419,214,2.771,215,2.288,216,2.288,217,2.288,218,2.771,219,3.366,220,3.366,221,3.366,222,3.366,223,2.288,224,2.288,225,1.884,226,2.288,227,2.288,228,2.288,229,2.288,230,1.884,231,1.884,232,1.618,233,1.884,234,1.618,235,2.288,236,2.288]],["title/modules/DatabaseModule.html",[41,0.986,54,1.338]],["body/modules/DatabaseModule.html",[2,1.303,3,0.489,4,0.489,5,0.367,13,0.039,18,0.626,23,0.986,24,0.626,28,0.489,29,0.257,39,0.028,40,0.028,41,1.577,43,1.444,44,1.444,45,1.793,46,1.793,47,1.444,48,2.657,49,2.657,54,2.481,56,2.372,57,1.793,58,1.793,60,2.02,78,2.372,146,0.827,160,1.303,161,1.177,176,1.444,188,2.356,213,2.02,237,2.682,238,2.682,239,2.682,240,3.258,241,2.682,242,2.02,243,2.682,244,3.258,245,3.258,246,3.258,247,2.303,248,2.682,249,2.682,250,2.303,251,2.682,252,2.303,253,2.303,254,2.682,255,2.682,256,2.682,257,3.258,258,2.303,259,3.258,260,3.258,261,3.258,262,2.303,263,2.682]],["title/injectables/DatabaseService.html",[79,0.724,188,1.207]],["body/injectables/DatabaseService.html",[3,0.202,4,0.202,5,0.152,7,0.202,8,0.727,13,0.04,14,1.14,16,1.357,17,1.357,18,0.798,19,1.227,20,0.953,21,1.515,23,0.754,24,0.259,28,0.202,29,0.106,33,1.569,39,0.014,40,0.014,78,2.39,79,0.534,80,0.664,84,1.419,90,0.836,92,1.11,97,1.569,101,0.836,102,1.225,104,0.664,113,1.8,146,0.95,147,2.477,160,1.901,161,1.755,176,0.598,186,0.986,188,0.89,200,0.953,201,0.836,204,2.043,209,0.953,211,3.36,213,2.043,214,1.11,242,0.836,243,1.11,247,1.573,248,1.11,249,1.11,250,0.953,251,1.11,252,0.953,253,0.953,254,1.11,255,1.11,256,1.11,262,1.573,264,1.11,265,3.296,266,1.832,267,3.296,268,2.225,269,2.225,270,2.225,271,3.927,272,2.225,273,3.296,274,2.225,275,1.348,276,3.296,277,1.348,278,2.225,279,1.348,280,2.225,281,3.927,282,1.348,283,1.348,284,2.225,285,1.348,286,2.392,287,2.225,288,2.477,289,1.348,290,1.797,291,2.225,292,1.348,293,1.348,294,2.225,295,1.348,296,1.348,297,2.225,298,1.348,299,2.84,300,1.11,301,0.953,302,1.348,303,0.953,304,1.348,305,2.225,306,1.348,307,1.348,308,2.84,309,1.348,310,1.348,311,1.348,312,1.348,313,1.348,314,3.648,315,1.348,316,1.348,317,1.348,318,1.379,319,1.348,320,1.348,321,1.348,322,1.564,323,1.348,324,2.225,325,1.348,326,1.348,327,1.348,328,1.348,329,1.348,330,1.348,331,1.348,332,1.348,333,1.348,334,1.348,335,1.348,336,1.348,337,1.348,338,1.348,339,1.348,340,2.84,341,2.84,342,2.225,343,1.348,344,1.348,345,2.225,346,2.225,347,1.348,348,1.348,349,2.225,350,2.225,351,4.342,352,1.348,353,1.348,354,1.348,355,1.348,356,1.854,357,2.79,358,2.874,359,1.348,360,1.348,361,0.664,362,1.348,363,1.348,364,1.564,365,1.348,366,1.348,367,1.348,368,1.348,369,1.348,370,1.348,371,1.348,372,1.348,373,1.348,374,1.348,375,1.348,376,1.348,377,1.348,378,1.348,379,1.348,380,1.348,381,1.348,382,1.348,383,1.348,384,0.836,385,1.348,386,1.348,387,1.348]],["title/guards/JwtAuthGuard.html",[134,1.661,388,1.871]],["body/guards/JwtAuthGuard.html",[3,0.385,4,0.385,5,0.289,7,0.385,8,1.195,13,0.04,14,0.877,16,1.195,17,1.195,18,0.702,19,1.08,21,0.839,23,0.892,24,0.493,28,0.385,29,0.202,30,1.413,33,1.774,39,0.024,40,0.024,78,1.413,79,0.877,90,1.591,97,0.928,101,1.591,102,1.413,103,2.641,104,2.099,112,3.012,113,1.704,134,2.013,146,0.98,147,2.013,170,1.413,176,1.138,178,1.815,179,1.591,186,1.138,188,1.857,189,4.201,191,3.012,199,1.815,203,1.815,204,1.591,218,3.011,231,2.113,233,2.113,234,3.012,303,1.815,318,1.591,388,2.641,389,1.815,390,3.012,391,2.113,392,4.041,393,2.567,394,2.567,395,2.113,396,3.823,397,2.567,398,3.011,399,3.011,400,1.815,401,2.113,402,1.815,403,3.011,404,2.113,405,5.462,406,2.567,407,4.261,408,2.567,409,2.567,410,2.567,411,2.567,412,2.567,413,2.567,414,2.567,415,2.567,416,2.567,417,2.567,418,2.567]],["title/injectables/JwtStrategy.html",[79,0.724,167,1.487]],["body/injectables/JwtStrategy.html",[3,0.501,4,0.501,5,0.376,7,0.501,8,1.431,13,0.039,14,1.05,16,1.092,17,1.092,18,0.641,19,0.986,21,1.092,23,0.996,24,0.641,28,0.501,29,0.263,33,1.207,39,0.028,40,0.028,79,1.05,80,1.646,97,1.207,113,1.954,121,1.839,135,2.071,137,2.556,138,2.361,146,0.841,161,1.207,167,2.158,172,2.361,176,1.48,179,2.071,186,2.166,234,2.361,262,2.361,286,1.646,290,1.646,356,1.336,419,2.75,420,4.38,421,4.38,422,4.38,423,3.34,424,4.38,425,3.34,426,3.34,427,3.34,428,3.34,429,2.75,430,3.34,431,3.34,432,3.34,433,3.34,434,3.34,435,3.34,436,3.34,437,3.34,438,3.34,439,3.34]],["title/guards/RolesGuard.html",[388,1.871,440,1.871]],["body/guards/RolesGuard.html",[3,0.524,4,0.524,5,0.394,7,0.524,8,1.474,13,0.039,14,1.082,16,1.474,17,1.474,18,0.866,19,1.332,21,1.142,23,0.866,24,0.671,28,0.524,29,0.275,30,1.924,33,1.263,39,0.029,40,0.029,79,1.082,84,1.805,97,1.263,113,1.997,176,1.549,186,1.549,199,2.471,303,2.471,389,2.471,392,4.498,395,2.878,396,4.345,398,3.714,399,3.714,400,2.471,401,2.878,402,2.471,403,2.878,404,2.878,440,2.797,441,2.878,442,3.496,443,3.496,444,3.189,445,3.496,446,3.496]],["title/entities/User.html",[146,0.58,447,1.871]],["body/entities/User.html",[3,0.441,4,0.441,5,0.331,7,0.441,12,3.38,13,0.039,14,1.308,18,1.047,23,0.564,28,0.441,29,0.232,39,0.026,40,0.026,78,3.056,84,2.006,146,0.991,159,2.213,160,1.832,161,1.656,258,2.078,286,2.258,288,2.712,290,2.258,301,2.078,322,2.213,356,1.832,357,2.841,358,2.841,361,1.448,364,1.618,447,2.492,448,2.42,449,4.582,450,4.021,451,2.94,452,4.582,453,2.94,454,2.842,455,4.926,456,2.94,457,2.94,458,5.326,459,2.94,460,2.94,461,2.94,462,2.94,463,3.31]],["title/controllers/UserController.html",[0,1.338,464,1.871]],["body/controllers/UserController.html",[0,0.787,2,0.71,3,0.266,4,0.266,5,0.2,7,0.266,8,0.907,12,2.98,13,0.039,14,1.153,16,1.453,17,1.453,18,0.854,19,1.313,21,1.571,23,0.742,24,0.341,28,0.266,29,0.14,30,0.977,31,0.977,39,0.018,40,0.018,84,2.046,97,1.737,111,1.462,113,2.296,114,2.814,117,1.462,120,3.699,121,2.646,129,1.255,130,1.462,131,1.462,134,0.977,136,1.462,146,0.892,152,3.453,160,1.778,161,1.003,232,2.732,286,0.875,288,2.72,290,2.19,361,0.875,384,1.101,390,1.255,440,1.101,454,2.416,464,1.721,465,1.462,466,2.814,467,2.814,468,3.418,469,3.865,470,3.865,471,2.776,472,2.285,473,1.775,474,3.182,475,1.775,476,1.775,477,1.775,478,3.958,479,1.775,480,1.775,481,3.453,482,1.775,483,3.182,484,3.182,485,3.182,486,3.865,487,1.775,488,1.775,489,1.775,490,1.775,491,1.775,492,1.775,493,1.775,494,1.775,495,2.776,496,1.775,497,1.462,498,2.776,499,1.775,500,1.462,501,1.775,502,1.684,503,1.462,504,1.775,505,1.775,506,1.462,507,2.776,508,1.775,509,2.776,510,1.775,511,2.814,512,1.775,513,1.775,514,2.776,515,1.775,516,2.776,517,2.776,518,1.775,519,1.775,520,1.775,521,1.775,522,1.462,523,1.775,524,1.775,525,1.775,526,1.775,527,1.462,528,1.775,529,1.775,530,1.775,531,1.462,532,1.775,533,1.462,534,1.775,535,1.775,536,1.775,537,1.775]],["title/classes/UserDTO.html",[29,0.238,137,1.487]],["body/classes/UserDTO.html",[3,0.5,4,0.5,5,0.375,7,0.5,13,0.039,14,1.29,16,1.088,17,1.088,18,1.033,19,0.983,28,0.5,29,0.262,39,0.028,40,0.028,84,2.167,137,2.153,157,2.354,159,2.406,161,2.034,186,1.476,286,2.773,288,2.962,290,2.651,356,2.25,538,2.741,539,4.371,540,4.371,541,3.33,542,3.33,543,3.33,544,3.33,545,3.33,546,3.33,547,3.33]],["title/modules/UserModule.html",[41,0.986,55,1.487]],["body/modules/UserModule.html",[2,1.682,3,0.471,4,0.471,5,0.354,13,0.04,23,1.082,24,0.603,28,0.471,29,0.248,39,0.027,40,0.027,41,1.549,43,1.392,44,1.392,45,1.729,46,1.729,47,1.392,48,2.609,49,1.729,54,2.407,55,2.842,56,2.315,57,1.729,58,1.729,60,2.607,146,0.603,167,2.676,169,2.586,170,1.729,175,2.586,176,1.392,177,2.586,178,2.22,179,1.947,180,2.22,181,2.586,182,2.586,183,2.586,241,2.586,242,1.947,263,2.586,464,2.939,502,2.676,503,2.586,548,2.586,549,3.141,550,2.586,551,3.141,552,3.141,553,3.141,554,3.141]],["title/injectables/UserService.html",[79,0.724,502,1.487]],["body/injectables/UserService.html",[3,0.208,4,0.208,5,0.156,7,0.208,8,0.743,13,0.04,14,1.052,16,1.373,17,1.373,18,0.807,19,1.241,20,1.607,21,1.373,23,0.555,24,0.266,28,0.208,29,0.109,31,0.762,33,1.915,39,0.015,40,0.015,79,0.545,80,0.682,84,1.962,90,0.858,97,1.642,101,0.858,102,1.251,103,3.088,104,2.454,106,3.273,113,2.171,121,2.313,146,0.956,147,2.785,160,1.59,161,0.821,186,1.007,187,1.139,188,1.339,191,1.607,200,0.978,201,0.858,203,0.978,204,0.858,206,2.757,209,2.367,211,1.607,213,0.858,225,1.139,286,1.12,288,2.989,290,0.682,322,0.762,356,0.553,357,2.076,358,1.793,361,1.12,364,1.251,384,2.076,400,0.978,454,2.044,466,1.871,467,1.871,472,1.871,474,2.381,478,3.612,481,3.612,483,2.757,484,2.381,485,2.757,497,1.871,502,1.12,555,1.139,556,2.273,557,3.349,558,2.273,559,2.273,560,1.384,561,2.273,562,2.892,563,1.384,564,3.699,565,2.273,566,1.384,567,2.273,568,1.384,569,1.384,570,2.273,571,1.384,572,1.384,573,2.273,574,1.384,575,1.384,576,1.384,577,3.699,578,3.976,579,2.273,580,1.384,581,1.384,582,1.384,583,1.384,584,2.892,585,2.273,586,3.349,587,2.273,588,2.273,589,2.273,590,3.349,591,2.273,592,2.273,593,2.273,594,1.871,595,1.384,596,4.677,597,1.384,598,1.384,599,1.384,600,1.384,601,1.384,602,1.384,603,1.384,604,1.384,605,2.273,606,1.384,607,1.384,608,1.384,609,1.384,610,1.384]],["title/coverage.html",[611,3.37]],["body/coverage.html",[0,2.126,1,1.995,5,0.362,6,2.649,13,0.039,18,0.618,25,1.585,29,0.337,34,1.771,39,0.028,40,0.028,47,1.426,79,1.276,81,2.649,104,1.585,109,1.995,110,2.649,123,1.771,132,1.585,134,1.771,137,1.585,146,0.618,158,2.649,167,1.585,184,2.649,188,1.287,264,2.649,322,3.299,388,2.649,390,2.275,391,2.649,419,2.649,440,1.995,441,2.649,444,2.275,447,1.995,448,2.649,464,1.995,465,2.649,502,1.585,538,2.649,555,2.649,611,2.649,612,3.218,613,3.218,614,5.32,615,3.218,616,3.218,617,3.218,618,3.218,619,3.218,620,2.649,621,3.218,622,5.112,623,3.518,624,4.273,625,2.649,626,4.273,627,3.218,628,3.218]],["title/dependencies.html",[44,1.606,629,2.085]],["body/dependencies.html",[13,0.04,24,0.706,27,3.029,29,0.367,39,0.03,40,0.03,44,1.63,62,3.029,68,3.029,69,3.029,135,2.28,170,2.025,172,2.6,201,2.28,242,2.28,300,3.029,301,2.6,402,2.6,429,4.212,630,5.116,631,3.679,632,3.679,633,3.679,634,3.679,635,3.679,636,3.679,637,3.679,638,3.679,639,3.679,640,3.679,641,3.679,642,3.679,643,3.679,644,3.679,645,3.679,646,3.679,647,3.679,648,3.679,649,3.679,650,3.679,651,3.679,652,3.679,653,3.679,654,3.679]],["title/miscellaneous/enumerations.html",[655,1.248,656,2.983]],["body/miscellaneous/enumerations.html",[7,0.658,13,0.038,39,0.034,40,0.034,146,0.996,356,2.075,361,2.557,364,2.856,655,2.159,656,3.608,657,4.383,658,4.383,659,4.551]],["title/miscellaneous/functions.html",[655,1.248,660,2.983]],["body/miscellaneous/functions.html",[7,0.689,13,0.034,39,0.034,40,0.034,47,2.498,620,3.781,655,2.263,660,3.781,661,4.593]],["title/index.html",[7,0.38,662,2.533,663,2.533]],["body/index.html",[5,0.253,13,0.038,19,1.288,34,1.236,39,0.021,40,0.021,41,1.29,55,1.106,112,2.345,115,3.443,116,1.587,120,3.657,129,2.79,135,1.391,146,1.095,160,1.578,180,2.345,230,3.25,232,2.79,247,3.082,250,2.79,252,2.345,253,2.345,266,3.25,318,2.884,322,1.236,356,1.327,357,2.057,358,1.391,361,1.945,364,1.236,384,1.391,447,1.391,500,3.25,506,1.848,511,3.59,522,1.848,527,3.25,531,1.848,533,1.848,594,1.848,664,1.848,665,2.245,666,3.25,667,1.848,668,1.848,669,3.318,670,3.318,671,2.245,672,2.245,673,3.947,674,3.947,675,2.245,676,2.245,677,3.318,678,3.318,679,3.318,680,3.318,681,3.318,682,3.318,683,2.245,684,2.245,685,2.245,686,2.245,687,2.245,688,2.245,689,2.245,690,2.245,691,2.245,692,2.732,693,2.245,694,3.318,695,2.732,696,4.361,697,2.245,698,2.245,699,2.245,700,2.245,701,3.318,702,2.245,703,2.245,704,2.245,705,2.245,706,2.245,707,2.245,708,2.245,709,4.361,710,4.361,711,4.361,712,4.361,713,4.361,714,2.245,715,2.245,716,3.25,717,2.245,718,3.25,719,2.245,720,2.245,721,2.245,722,2.245,723,3.318,724,2.245,725,2.245,726,2.245,727,2.245,728,3.318,729,2.245,730,2.245,731,2.245,732,2.245,733,2.245,734,3.318,735,2.245,736,3.318,737,2.245,738,2.245,739,2.245,740,2.245,741,2.245,742,2.245,743,2.245]],["title/modules.html",[43,1.814]],["body/modules.html",[13,0.033,39,0.033,40,0.033,42,2.694,43,1.926,53,2.393,54,1.926,55,2.141,744,5.699,745,5.699,746,5.699,747,5.699]],["title/overview.html",[748,3.37]],["body/overview.html",[2,1.303,13,0.039,25,2.378,39,0.028,40,0.028,41,1.065,42,3.599,43,1.444,44,1.444,45,1.793,46,1.793,47,1.444,48,1.793,49,1.793,50,2.682,51,2.682,52,2.682,53,3.166,54,2.518,55,2.833,56,2.372,57,1.793,58,1.793,80,1.605,132,2.378,157,2.303,164,2.682,165,2.682,167,2.531,188,2.238,237,2.682,238,2.682,239,2.682,258,2.303,318,2.02,389,2.303,502,2.378,548,2.682,550,2.682,692,2.682,695,2.682,716,3.547,718,2.682,748,2.682]],["title/properties.html",[159,1.994,629,2.085]],["body/properties.html",[13,0.038,39,0.034,40,0.034,146,0.842,159,2.413,664,3.608,666,3.608,667,3.608,668,3.608,749,4.383,750,4.383,751,4.383,752,4.383,753,4.383,754,4.383,755,4.383,756,4.383,757,4.383]],["title/miscellaneous/variables.html",[655,1.248,758,2.983]],["body/miscellaneous/variables.html",[7,0.642,13,0.038,18,0.821,39,0.033,40,0.033,84,1.545,356,1.71,444,4.096,463,4.21,623,3.52,625,4.21,655,2.107,659,4.21,758,3.52,759,5.113,760,4.276]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":322,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["0.1.1",{"_index":750,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":318,"title":{},"body":{"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"index.html":{},"overview.html":{}}}],["1.0.0",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{}}}],["10.0.0",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["1001",{"_index":372,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["1002",{"_index":379,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["16.4.7",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["1h",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["2",{"_index":716,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.4.3",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":718,"title":{},"body":{"index.html":{},"overview.html":{}}}],["3.3.0",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":692,"title":{},"body":{"index.html":{},"overview.html":{}}}],["4.0.1",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":695,"title":{},"body":{"index.html":{},"overview.html":{}}}],["5000",{"_index":677,"title":{},"body":{"index.html":{}}}],["5432",{"_index":255,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["7.8.1",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":100,"title":{},"body":{"injectables/AppService.html":{}}}],["8.13.1",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["access",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["access_token",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":715,"title":{},"body":{"index.html":{}}}],["admin",{"_index":361,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["admin,partner,user",{"_index":740,"title":{},"body":{"index.html":{}}}],["alice",{"_index":354,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["alice@example.com",{"_index":355,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["already",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{}}}],["another",{"_index":688,"title":{},"body":{"index.html":{}}}],["api",{"_index":531,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["apis",{"_index":707,"title":{},"body":{"index.html":{}}}],["app",{"_index":708,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":42,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":25,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["asc",{"_index":307,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["async",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"index.html":{}}}],["auth.controller",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":391,"title":{},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:7",{"_index":394,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.guard.ts:9",{"_index":397,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.service",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/login",{"_index":717,"title":{},"body":{"index.html":{}}}],["auth/profile",{"_index":719,"title":{},"body":{"index.html":{}}}],["auth/register",{"_index":714,"title":{},"body":{"index.html":{}}}],["authcontroller",{"_index":109,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":123,"title":{"classes/AuthDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authdto,userdto",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto.username",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":738,"title":{},"body":{"index.html":{}}}],["authmodule",{"_index":53,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":753,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":739,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":132,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":259,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["await",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["badrequestexception",{"_index":400,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["badrequestexception(\"user",{"_index":413,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["badrequestexception('email",{"_index":593,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('username",{"_index":588,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('your",{"_index":581,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{}}}],["bcrypt.compare(authdto.password",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(oldpassword",{"_index":580,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(\"password123",{"_index":352,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["bcrypt.hash(authdto.password",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newpassword",{"_index":583,"title":{},"body":{"injectables/UserService.html":{}}}],["bcryptjs",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["belong",{"_index":414,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["bind",{"_index":415,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["bob",{"_index":359,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["bob@example.com",{"_index":360,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["body",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["body('email",{"_index":517,"title":{},"body":{"controllers/UserController.html":{}}}],["body('id",{"_index":515,"title":{},"body":{"controllers/UserController.html":{}}}],["body('isactive",{"_index":520,"title":{},"body":{"controllers/UserController.html":{}}}],["body('newpassword",{"_index":525,"title":{},"body":{"controllers/UserController.html":{}}}],["body('partner_id",{"_index":519,"title":{},"body":{"controllers/UserController.html":{}}}],["body('password",{"_index":524,"title":{},"body":{"controllers/UserController.html":{}}}],["body('role",{"_index":518,"title":{},"body":{"controllers/UserController.html":{}}}],["body('username",{"_index":516,"title":{},"body":{"controllers/UserController.html":{}}}],["boolean",{"_index":454,"title":{},"body":{"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["bootstrap",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":747,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":744,"title":{},"body":{"modules.html":{}}}],["build",{"_index":701,"title":{},"body":{"index.html":{}}}],["c",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"injectables/DatabaseService.html":{}}}],["canactivate",{"_index":392,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":395,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["catch",{"_index":101,"title":{},"body":{"injectables/AppService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["change",{"_index":522,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["changepassword",{"_index":466,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["changepassword(password",{"_index":473,"title":{},"body":{"controllers/UserController.html":{}}}],["changepassword(userid",{"_index":561,"title":{},"body":{"injectables/UserService.html":{}}}],["charlie",{"_index":362,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["charlie@example.com",{"_index":363,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["check",{"_index":720,"title":{},"body":{"index.html":{}}}],["checkdatabase",{"_index":265,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["chua",{"_index":342,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["class",{"_index":29,"title":{"classes/AuthDTO.html":{},"classes/UserDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":157,"title":{},"body":{"classes/AuthDTO.html":{},"classes/UserDTO.html":{},"overview.html":{}}}],["client",{"_index":299,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["client.connect",{"_index":315,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["client.end",{"_index":335,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["client.query",{"_index":316,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["client.query(`create",{"_index":323,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["cluster_appmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":237,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":238,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":239,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":548,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":549,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":550,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["co",{"_index":339,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["column",{"_index":458,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":455,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":449,"title":{},"body":{"entities/User.html":{}}}],["compile",{"_index":693,"title":{},"body":{"index.html":{}}}],["compose",{"_index":705,"title":{},"body":{"index.html":{}}}],["compose.yml",{"_index":698,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('username",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('error",{"_index":606,"title":{},"body":{"injectables/UserService.html":{}}}],["console.error('lỗi",{"_index":330,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["console.log(\"1",{"_index":439,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log(\"jwt",{"_index":407,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["console.log(\"path",{"_index":91,"title":{},"body":{"injectables/AppService.html":{}}}],["console.log('database",{"_index":349,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["console.log(`database",{"_index":324,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["console.log(req.user",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["constructor(dbservice",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["constructor(id",{"_index":539,"title":{},"body":{"classes/UserDTO.html":{}}}],["constructor(jwtservice",{"_index":393,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["constructor(private",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["constructor(roles",{"_index":442,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(userrepository",{"_index":275,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["context",{"_index":398,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":404,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('user",{"_index":505,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":611,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":266,"title":{},"body":{"injectables/DatabaseService.html":{},"index.html":{}}}],["create(user",{"_index":280,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["credentials",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["công",{"_index":327,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["daisy",{"_index":366,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["daisy@example.com",{"_index":367,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["data",{"_index":596,"title":{},"body":{"injectables/UserService.html":{}}}],["data.map",{"_index":604,"title":{},"body":{"injectables/UserService.html":{}}}],["data.partner_id",{"_index":602,"title":{},"body":{"injectables/UserService.html":{}}}],["data.role",{"_index":601,"title":{},"body":{"injectables/UserService.html":{}}}],["database",{"_index":247,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"index.html":{}}}],["database.service",{"_index":244,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["database/database.module.ts",{"_index":690,"title":{},"body":{"index.html":{}}}],["databasemodule",{"_index":54,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseservice",{"_index":188,"title":{"injectables/DatabaseService.html":{}},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["datname",{"_index":320,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["db_host=postgres",{"_index":678,"title":{},"body":{"index.html":{}}}],["db_name=user_service",{"_index":682,"title":{},"body":{"index.html":{}}}],["db_password=your_password",{"_index":681,"title":{},"body":{"index.html":{}}}],["db_port=5432",{"_index":679,"title":{},"body":{"index.html":{}}}],["db_username=your_username",{"_index":680,"title":{},"body":{"index.html":{}}}],["dbname",{"_index":314,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["dbservice",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["declarations",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":463,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":44,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":664,"title":{},"body":{"index.html":{},"properties.html":{}}}],["detail",{"_index":731,"title":{},"body":{"index.html":{}}}],["development",{"_index":700,"title":{},"body":{"index.html":{}}}],["dinh",{"_index":755,"title":{},"body":{"properties.html":{}}}],["disabled",{"_index":721,"title":{},"body":{"index.html":{}}}],["docker",{"_index":696,"title":{},"body":{"index.html":{}}}],["docker/cloud",{"_index":691,"title":{},"body":{"index.html":{}}}],["document",{"_index":742,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["documentpath",{"_index":88,"title":{},"body":{"injectables/AppService.html":{}}}],["dotenv",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["dtos",{"_index":737,"title":{},"body":{"index.html":{}}}],["du",{"_index":340,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["dung",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["edit",{"_index":527,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["editprofile",{"_index":467,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["editprofile(newusername",{"_index":477,"title":{},"body":{"controllers/UserController.html":{}}}],["editprofile(userid",{"_index":565,"title":{},"body":{"injectables/UserService.html":{}}}],["edituser",{"_index":468,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser(id",{"_index":482,"title":{},"body":{"controllers/UserController.html":{}}}],["edituserprofile",{"_index":556,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserprofile(userid",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["edward",{"_index":368,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["edward@example.com",{"_index":369,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["email",{"_index":286,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["email,role,active",{"_index":512,"title":{},"body":{"controllers/UserController.html":{}}}],["entities",{"_index":258,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":447,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["enumerations",{"_index":656,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["env.example",{"_index":676,"title":{},"body":{"index.html":{}}}],["error",{"_index":102,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["error('documentation",{"_index":105,"title":{},"body":{"injectables/AppService.html":{}}}],["error('invalid",{"_index":598,"title":{},"body":{"injectables/UserService.html":{}}}],["error('unable",{"_index":608,"title":{},"body":{"injectables/UserService.html":{}}}],["ex:d@ql0qg+j8mkz!rz2x9tlz!$2#tz8p4ftsx7ywwz!8ygh3",{"_index":685,"title":{},"body":{"index.html":{}}}],["example",{"_index":673,"title":{},"body":{"index.html":{}}}],["except",{"_index":733,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":396,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["existingemail",{"_index":590,"title":{},"body":{"injectables/UserService.html":{}}}],["existingemail.id",{"_index":592,"title":{},"body":{"injectables/UserService.html":{}}}],["existinguser",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["existinguser.id",{"_index":587,"title":{},"body":{"injectables/UserService.html":{}}}],["existingusers",{"_index":347,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["existingusers.length",{"_index":348,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["exists",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["expired",{"_index":418,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["expiresin",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["export",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["extends",{"_index":420,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":427,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":432,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":262,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{}}}],["fetch",{"_index":609,"title":{},"body":{"injectables/UserService.html":{}}}],["fetching",{"_index":607,"title":{},"body":{"injectables/UserService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["finally",{"_index":334,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findall",{"_index":267,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyemail",{"_index":268,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyemail(email",{"_index":284,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyuserid",{"_index":269,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyuserid(id",{"_index":287,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyusername",{"_index":270,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["findbyusername(username",{"_index":291,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["finish",{"_index":741,"title":{},"body":{"index.html":{}}}],["fiona",{"_index":370,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["fiona@example.com",{"_index":371,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["forbiddenexception",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["forbiddenexception('invalid",{"_index":417,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["forbiddenexception('no",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('please",{"_index":408,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["found",{"_index":106,"title":{},"body":{"injectables/AppService.html":{},"injectables/UserService.html":{}}}],["frontend",{"_index":743,"title":{},"body":{"index.html":{}}}],["fs",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["function",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":712,"title":{},"body":{"index.html":{}}}],["functions",{"_index":660,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["george",{"_index":373,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["george@example.com",{"_index":374,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["get('/:id",{"_index":495,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/list",{"_index":508,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/profile",{"_index":529,"title":{},"body":{"controllers/UserController.html":{}}}],["get('partner_id/:id",{"_index":498,"title":{},"body":{"controllers/UserController.html":{}}}],["getall",{"_index":469,"title":{},"body":{"controllers/UserController.html":{}}}],["getalluser",{"_index":557,"title":{},"body":{"injectables/UserService.html":{}}}],["getdocumentation",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getdocumentation(@res",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["getdocumentation(res",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["getlist",{"_index":470,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["getprofile(@req",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["getting",{"_index":662,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":471,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@param('id",{"_index":534,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(id",{"_index":494,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserinfo",{"_index":558,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserinfo(userid",{"_index":570,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserpartnerid",{"_index":472,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getuserpartnerid(@param('id",{"_index":536,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserpartnerid(id",{"_index":497,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getuserprofile",{"_index":559,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserprofile(userid",{"_index":573,"title":{},"body":{"injectables/UserService.html":{}}}],["guard",{"_index":388,"title":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["guards",{"_index":389,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["handle",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["hannah",{"_index":375,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["hannah@example.com",{"_index":376,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["hashedpassword",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{}}}],["hello",{"_index":107,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["host",{"_index":250,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"index.html":{}}}],["id",{"_index":290,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["if(!user.isactive",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(user.role",{"_index":595,"title":{},"body":{"injectables/UserService.html":{}}}],["ignoreexpiration",{"_index":433,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implement",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["implements",{"_index":303,"title":{},"body":{"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{}}}],["included",{"_index":734,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":582,"title":{},"body":{"injectables/UserService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":89,"title":{},"body":{"injectables/AppService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["information",{"_index":511,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["informations",{"_index":732,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":79,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":80,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":302,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["injectrepository(user",{"_index":304,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["install",{"_index":671,"title":{},"body":{"index.html":{}}}],["install2",{"_index":675,"title":{},"body":{"index.html":{}}}],["isactive",{"_index":358,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"index.html":{}}}],["isglobal",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["ispasswordvalid",{"_index":579,"title":{},"body":{"injectables/UserService.html":{}}}],["ivan",{"_index":377,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["ivan@example.com",{"_index":378,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["join",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["join(__dirname",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["julia",{"_index":380,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["julia@example.com",{"_index":381,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["jwt",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_key",{"_index":683,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":134,"title":{"guards/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":431,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtservice",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["jwtstrategy",{"_index":167,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["khi",{"_index":331,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["kiem",{"_index":336,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["kiểm",{"_index":332,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["legend",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":751,"title":{},"body":{"properties.html":{}}}],["lieu",{"_index":341,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["list",{"_index":506,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["local",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["localhost",{"_index":252,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"index.html":{}}}],["logging",{"_index":261,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["login",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["login(@body",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(authdto",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(userdto",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["manage",{"_index":510,"title":{},"body":{"controllers/UserController.html":{}}}],["match",{"_index":697,"title":{},"body":{"index.html":{}}}],["matching",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":346,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["metadata",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":710,"title":{},"body":{"index.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":655,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":703,"title":{},"body":{"index.html":{}}}],["modify",{"_index":689,"title":{},"body":{"index.html":{}}}],["module",{"_index":41,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":43,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mount",{"_index":385,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["nam",{"_index":756,"title":{},"body":{"properties.html":{}}}],["name",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":665,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":242,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["neu",{"_index":343,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["new",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newemail",{"_index":478,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newisactive",{"_index":485,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newpartnerid",{"_index":484,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newpartnerid,role",{"_index":599,"title":{},"body":{"injectables/UserService.html":{}}}],["newpassword",{"_index":474,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newrole",{"_index":483,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["newuser",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{}}}],["newusername",{"_index":481,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["nguyen",{"_index":754,"title":{},"body":{"properties.html":{}}}],["note",{"_index":713,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":575,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception('user",{"_index":578,"title":{},"body":{"injectables/UserService.html":{}}}],["npm",{"_index":674,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":450,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":288,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["nội",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["observable",{"_index":401,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["oldpassword",{"_index":562,"title":{},"body":{"injectables/UserService.html":{}}}],["onapplicationbootstrap",{"_index":271,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["optional",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"index.html":{}}}],["optional)example",{"_index":699,"title":{},"body":{"index.html":{}}}],["order",{"_index":306,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["out",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":748,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":629,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":672,"title":{},"body":{"index.html":{}}}],["param",{"_index":501,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["parseint(process.env.db_port",{"_index":254,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["partial",{"_index":281,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["partner",{"_index":364,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["partner'].includes(newrole",{"_index":597,"title":{},"body":{"injectables/UserService.html":{}}}],["partner_id",{"_index":357,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"index.html":{}}}],["partner_id:1001",{"_index":365,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["passport",{"_index":429,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":426,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":421,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":160,"title":{},"body":{"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["password,isactive",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["path",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["payload",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":437,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":435,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.role",{"_index":438,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":436,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["pg",{"_index":300,"title":{},"body":{"injectables/DatabaseService.html":{},"dependencies.html":{}}}],["pg_database",{"_index":319,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["port",{"_index":253,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"index.html":{}}}],["post",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["post('login",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('profile",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":246,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgressql",{"_index":687,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":452,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["process.env.db_host",{"_index":251,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["process.env.db_name",{"_index":248,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["process.env.db_password",{"_index":313,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["process.env.db_username",{"_index":256,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["process.env.jwt_key",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{}}}],["production",{"_index":702,"title":{},"body":{"index.html":{}}}],["profile",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"index.html":{}}}],["project",{"_index":669,"title":{},"body":{"index.html":{}}}],["promise",{"_index":399,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["properties",{"_index":159,"title":{"properties.html":{}},"body":{"classes/AuthDTO.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"properties.html":{}}}],["provide",{"_index":409,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["providers",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["put",{"_index":500,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["put('/change",{"_index":523,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/edit",{"_index":514,"title":{},"body":{"controllers/UserController.html":{}}}],["readfilesync",{"_index":86,"title":{},"body":{"injectables/AppService.html":{}}}],["readfilesync(documentpath",{"_index":98,"title":{},"body":{"injectables/AppService.html":{}}}],["readonly",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["register(@body",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(authdto",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(authdto:authdto",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":272,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["remove(id",{"_index":294,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["replaced",{"_index":722,"title":{},"body":{"index.html":{}}}],["repository",{"_index":276,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["req",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["req.user",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":403,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["request.headers.authorization.split",{"_index":406,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["request.user",{"_index":416,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["require('dotenv').config",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{}}}],["required",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["res",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/DatabaseService.html":{},"injectables/UserService.html":{}}}],["res.rowcount",{"_index":321,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["res.send(documentation",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["res.setheader('content",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["rest",{"_index":605,"title":{},"body":{"injectables/UserService.html":{}}}],["results",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role",{"_index":356,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["role=partner",{"_index":727,"title":{},"body":{"index.html":{}}}],["roles",{"_index":444,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(admin,partner,user",{"_index":576,"title":{},"body":{"injectables/UserService.html":{}}}],["roles_key",{"_index":625,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":440,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["rolesguard())@useguards(jwtauthguard)@get('/list",{"_index":490,"title":{},"body":{"controllers/UserController.html":{}}}],["rolesguard())@useguards(jwtauthguard)@put('/edit",{"_index":487,"title":{},"body":{"controllers/UserController.html":{}}}],["rolesguard(['admin",{"_index":507,"title":{},"body":{"controllers/UserController.html":{}}}],["rootpath",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":736,"title":{},"body":{"index.html":{}}}],["run",{"_index":694,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":402,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["sample",{"_index":383,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["sampleusers",{"_index":353,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["secret",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"guards/JwtAuthGuard.html":{},"modules/UserModule.html":{}}}],["secretorkey",{"_index":434,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["seeddatabase",{"_index":273,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["seeded",{"_index":350,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["select",{"_index":317,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["serveroot",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":666,"title":{},"body":{"index.html":{},"properties.html":{}}}],["setmetadata(roles_key",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":670,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["specific",{"_index":533,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["src/.../main.ts",{"_index":661,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.enum.ts",{"_index":657,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:10",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":81,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:18",{"_index":85,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":83,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:26",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:36",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:55",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:7",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt",{"_index":390,"title":{},"body":{"guards/JwtAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy",{"_index":554,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":425,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":423,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/database/database.module",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["src/database/database.module.ts",{"_index":240,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.service",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["src/database/database.service.ts",{"_index":264,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["src/database/database.service.ts:103",{"_index":293,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:11",{"_index":277,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:16",{"_index":283,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:24",{"_index":292,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:27",{"_index":289,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:30",{"_index":285,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:35",{"_index":282,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:40",{"_index":298,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:44",{"_index":295,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:47",{"_index":279,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:76",{"_index":296,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/dto",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/dto/authdto.ts",{"_index":158,"title":{},"body":{"classes/AuthDTO.html":{},"coverage.html":{}}}],["src/dto/authdto.ts:2",{"_index":163,"title":{},"body":{"classes/AuthDTO.html":{}}}],["src/dto/authdto.ts:3",{"_index":162,"title":{},"body":{"classes/AuthDTO.html":{}}}],["src/dto/userdto.ts",{"_index":538,"title":{},"body":{"classes/UserDTO.html":{},"coverage.html":{}}}],["src/dto/userdto.ts:2",{"_index":542,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/dto/userdto.ts:3",{"_index":543,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/dto/userdto.ts:4",{"_index":541,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/dto/userdto.ts:5",{"_index":540,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/main.ts",{"_index":620,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/role.enum.ts",{"_index":658,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/roles.decorator.ts",{"_index":623,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/roles.guards",{"_index":504,"title":{},"body":{"controllers/UserController.html":{}}}],["src/roles.guards.ts",{"_index":441,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/roles.guards.ts:5",{"_index":443,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/roles.guards.ts:7",{"_index":445,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/user/user.controller.ts",{"_index":465,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:26",{"_index":491,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:33",{"_index":488,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:49",{"_index":476,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:59",{"_index":480,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:69",{"_index":493,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:76",{"_index":489,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:81",{"_index":496,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:86",{"_index":499,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity",{"_index":243,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["src/user/user.entity.ts",{"_index":448,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:12",{"_index":451,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:15",{"_index":459,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:18",{"_index":460,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:21",{"_index":457,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:24",{"_index":456,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:6",{"_index":453,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:9",{"_index":461,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.module.ts",{"_index":551,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":555,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:13",{"_index":563,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:27",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:42",{"_index":574,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:58",{"_index":568,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:6",{"_index":560,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:77",{"_index":571,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:85",{"_index":572,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:96",{"_index":569,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":704,"title":{},"body":{"index.html":{}}}],["started",{"_index":663,"title":{"index.html":{}},"body":{}}],["statements",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["status",{"_index":513,"title":{},"body":{"controllers/UserController.html":{}}}],["strategy",{"_index":428,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"classes/AuthDTO.html":{},"injectables/DatabaseService.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.db_password",{"_index":257,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["stt",{"_index":709,"title":{},"body":{"index.html":{}}}],["super",{"_index":430,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":745,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":746,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":260,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["system",{"_index":668,"title":{},"body":{"index.html":{},"properties.html":{}}}],["table",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":589,"title":{},"body":{"injectables/UserService.html":{}}}],["tao",{"_index":345,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["tasks",{"_index":735,"title":{},"body":{"index.html":{}}}],["temp",{"_index":532,"title":{},"body":{"controllers/UserController.html":{}}}],["text/html",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["thi",{"_index":344,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.appservice.getdocumentation",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(user",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(authdto",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(authdto",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.checkdatabase",{"_index":386,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.dbservice.create",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.dbservice.findall",{"_index":603,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.findbyemail(newemail",{"_index":591,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.findbyuserid(id",{"_index":600,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.findbyuserid(payload.id",{"_index":412,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["this.dbservice.findbyuserid(userid",{"_index":577,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.findbyusername(authdto.username",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.dbservice.findbyusername(newusername",{"_index":585,"title":{},"body":{"injectables/UserService.html":{}}}],["this.dbservice.update(userid",{"_index":584,"title":{},"body":{"injectables/UserService.html":{}}}],["this.email",{"_index":546,"title":{},"body":{"classes/UserDTO.html":{}}}],["this.id",{"_index":544,"title":{},"body":{"classes/UserDTO.html":{}}}],["this.jwtservice.sign(payload",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":411,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["this.role",{"_index":547,"title":{},"body":{"classes/UserDTO.html":{}}}],["this.roles.includes(request.user.role.tolowercase",{"_index":446,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.seeddatabase",{"_index":387,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.username",{"_index":545,"title":{},"body":{"classes/UserDTO.html":{}}}],["this.userrepository.create(user",{"_index":309,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.delete(id",{"_index":312,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.find",{"_index":305,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.findone",{"_index":308,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.save(newuser",{"_index":310,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.save(sampleusers",{"_index":382,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userrepository.update(id",{"_index":311,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.userservice.changepassword(req.user.id",{"_index":526,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.editprofile(req.user.id,newusername",{"_index":528,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.edituserprofile(id,newusername",{"_index":521,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getalluser",{"_index":509,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserinfo(id",{"_index":535,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserpartnerid(id",{"_index":537,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserprofile(req.user.id",{"_index":530,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["thuan",{"_index":757,"title":{},"body":{"properties.html":{}}}],["thành",{"_index":326,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["time",{"_index":610,"title":{},"body":{"injectables/UserService.html":{}}}],["token",{"_index":405,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["tr",{"_index":96,"title":{},"body":{"injectables/AppService.html":{}}}],["tra",{"_index":337,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["tra/tạo",{"_index":333,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["transformer",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"entities/User.html":{}}}],["try",{"_index":90,"title":{},"body":{"injectables/AppService.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["type",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":301,"title":{},"body":{"injectables/DatabaseService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":241,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":263,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":245,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["tại",{"_index":329,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["tạo",{"_index":325,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["tồn",{"_index":328,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["unauthorizedexception",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":462,"title":{},"body":{"entities/User.html":{}}}],["unknown",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":752,"title":{},"body":{"properties.html":{}}}],["up",{"_index":706,"title":{},"body":{"index.html":{}}}],["update",{"_index":274,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["update(id",{"_index":297,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["url",{"_index":711,"title":{},"body":{"index.html":{}}}],["use",{"_index":594,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["useguards",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@get('/profile",{"_index":492,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@post('profile",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@put('/change",{"_index":475,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@put('/edit",{"_index":479,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(new",{"_index":486,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":146,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["user.controller",{"_index":552,"title":{},"body":{"modules/UserModule.html":{}}}],["user.entity",{"_index":553,"title":{},"body":{"modules/UserModule.html":{}}}],["user.id",{"_index":586,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":503,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/:id",{"_index":725,"title":{},"body":{"index.html":{}}}],["user/change",{"_index":729,"title":{},"body":{"index.html":{}}}],["user/edit",{"_index":728,"title":{},"body":{"index.html":{}}}],["user/list",{"_index":730,"title":{},"body":{"index.html":{}}}],["user/partner_id/:id",{"_index":726,"title":{},"body":{"index.html":{}}}],["user/profile",{"_index":723,"title":{},"body":{"index.html":{}}}],["user/user.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["user_api",{"_index":724,"title":{},"body":{"index.html":{}}}],["user_service",{"_index":249,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{}}}],["usercontroller",{"_index":464,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":137,"title":{"classes/UserDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserDTO.html":{},"coverage.html":{}}}],["userid",{"_index":564,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":55,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":161,"title":{},"body":{"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":278,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["users",{"_index":384,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["userservice",{"_index":502,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwithoutpassword",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["userwithoutpassword.email",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwithoutpassword.id",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwithoutpassword.role",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwithoutpassword.username",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["using",{"_index":686,"title":{},"body":{"index.html":{}}}],["utf",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["v",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["validate",{"_index":422,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":424,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(authdto",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(authdto:authdto",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["value",{"_index":659,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":758,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify",{"_index":410,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["version",{"_index":749,"title":{},"body":{"properties.html":{}}}],["void",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["vou",{"_index":667,"title":{},"body":{"index.html":{},"properties.html":{}}}],["world",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["xem",{"_index":338,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["your_jwt_key",{"_index":684,"title":{},"body":{"index.html":{}}}],["zero",{"_index":351,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["zoom",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getDocumentation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDocumentation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDocumentation(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { Response } from 'express';\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n\n  @Get()\n  getDocumentation(@Res() res: Response): void {\n    const documentation = this.appService.getDocumentation();\n    res.setHeader('Content-Type', 'text/html');\n    res.send(documentation); \n  }\n}\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { DatabaseModule } from './database/database.module';\nimport { UserModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n@Module({\n  imports: [ServeStaticModule.forRoot({\n    rootPath: join(__dirname, '..', 'documentation'), \n    serveRoot: '/', \n  }),\n    DatabaseModule,\n  ConfigModule.forRoot({ isGlobal: true }),\n    UserModule,\n    AuthModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDocumentation\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDocumentation\n                        \n                    \n                \n            \n            \n                \ngetDocumentation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { join } from 'path';\nimport { readFileSync } from 'fs';\n\n@Injectable()\nexport class AppService {\n  getDocumentation(): string {\n    const documentPath = join(__dirname, '..', 'documentation', 'index.html');\n    try {\n      console.log(\"path = \", documentPath);\n      // Đọc nội dung file và trả về\n      return readFileSync(documentPath, 'utf-8');\n    } catch (error) {\n      throw new Error('Documentation file not found.');\n    }\n  }\n\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(authDTO: AuthDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDTO\n                                            \n                                                            AuthDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(authDTO: AuthDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDTO\n                                            \n                                                            AuthDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Req, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport { AuthDTO, UserDTO } from 'src/DTO';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  async register(@Body() authDTO: AuthDTO ) {\n    // required implement handle error and verification here\n    const user = await this.authService.register(authDTO);\n    return this.authService.login(user);\n  }\n\n  @Post('login')\n  async login(@Body() authDTO: AuthDTO ) {\n    \n    const user = await this.authService.validateUser(authDTO);\n    return this.authService.login(user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('profile')\n  async getProfile(@Req() req: any) {\n    // console.log(req.user);\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDTO.html":{"url":"classes/AuthDTO.html","title":"class - AuthDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/DTO/authDTO.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/authDTO.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/authDTO.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AuthDTO{\n    username: string\n    password: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { DatabaseModule } from 'src/database/database.module';\nrequire('dotenv').config();\n@Module({\n  imports: [\n    DatabaseModule,\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_KEY, // .env\n      signOptions: { expiresIn: '1h' },\n    }),\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dbService: DatabaseService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dbService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(userDTO: UserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userDTO\n                                            \n                                                            UserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(authDTO: AuthDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDTO\n                                            \n                                                            AuthDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(authDTO: AuthDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDTO\n                                            \n                                                            AuthDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException, ConflictException, ForbiddenException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcryptjs';\nimport { AuthDTO,UserDTO } from 'src/DTO';\nimport { DatabaseService } from 'src/database/database.service';\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly dbService: DatabaseService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async register(authDTO:AuthDTO) {\n    const existingUser = await this.dbService.findByUsername(authDTO.username);\n    if (existingUser) {\n      throw new ConflictException('Username already exists');\n    }\n\n    const hashedPassword = await bcrypt.hash(authDTO.password, 10);\n    const newUser = await this.dbService.create({\n      username: authDTO.username,\n      password: hashedPassword,\n    });\n\n\n    const { password: _, ...userWithoutPassword } = newUser;\n    const userDTO = new UserDTO(\n      userWithoutPassword.id,\n      userWithoutPassword.username,\n      userWithoutPassword.email,\n      userWithoutPassword.role\n    );\n    return userDTO;\n  }\n\n  async validateUser(authDTO:AuthDTO) {\n    const user = await this.dbService.findByUsername(authDTO.username);\n    if (!user || !(await bcrypt.compare(authDTO.password, user.password))) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n    if(!user.isActive){\n      throw new ForbiddenException('No permission to access this profile!');\n    }\n\n    const { password,isActive, ...userWithoutPassword } = user;\n    const userDTO = new UserDTO(\n      userWithoutPassword.id,\n      userWithoutPassword.username,\n      userWithoutPassword.email,\n      userWithoutPassword.role\n    );\n    return userDTO;\n  }\n\n  async login(userDTO: UserDTO) {\n    const payload = { ...userDTO };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\n\nDatabaseService \n\nDatabaseService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'src/user/user.entity';\nimport { DatabaseService } from './database.service';\nrequire('dotenv').config();\n\n\n@Module({\n    imports: [TypeOrmModule.forRoot({\n        type: 'postgres',\n        database: process.env.DB_NAME || 'user_service', \n        host: process.env.DB_HOST || 'localhost',\n        port: parseInt(process.env.DB_PORT, 10) || 5432,\n        username: process.env.DB_USERNAME,\n        password: String(process.env.DB_PASSWORD),\n        entities: [User],\n        autoLoadEntities: true,\n        synchronize: true,\n        logging: false, \n    }), TypeOrmModule.forFeature([User])],\n    providers: [DatabaseService],\n    controllers: [],\n    exports: [DatabaseService]\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseService.html":{"url":"injectables/DatabaseService.html","title":"injectable - DatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/database.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkDatabase\n                            \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findByEmail\n                            \n                            \n                                findByUserID\n                            \n                            \n                                findByUsername\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                seedDatabase\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/database/database.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkDatabase\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkDatabase()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByEmail\n                        \n                    \n                \n            \n            \n                \nfindByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByUserID\n                        \n                    \n                \n            \n            \n                \nfindByUserID(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByUsername\n                        \n                    \n                \n            \n            \n                \nfindByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        seedDatabase\n                        \n                    \n                \n            \n            \n                \n                        \n                    seedDatabase()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, user: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/database.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { Client } from 'pg';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from 'src/user/user.entity';\nimport * as bcrypt from 'bcryptjs';\n\nrequire('dotenv').config();\n\n@Injectable()\nexport class DatabaseService implements OnApplicationBootstrap {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) { }\n  findAll() {\n    return this.userRepository.find({\n      order: {\n        id: 'ASC',\n      },\n    });\n  }\n\n  findByUsername(username: string) {\n    return this.userRepository.findOne({ where: { username } });\n  }\n  findByUserID(id: number) {\n    return this.userRepository.findOne({ where: { id } });\n  }\n  findByEmail(email: string) {\n    return this.userRepository.findOne({ where: { email } });\n  }\n\n\n  create(user: Partial) {\n    const newUser = this.userRepository.create(user);\n    return this.userRepository.save(newUser);\n  }\n\n  update(id: number, user: Partial) {\n    return this.userRepository.update(id, user);\n  }\n\n  remove(id: number) {\n    return this.userRepository.delete(id);\n  }\n  private async checkDatabase() {\n    const client = new Client({\n      user: process.env.DB_USERNAME,\n      password: process.env.DB_PASSWORD,\n      host: process.env.DB_HOST || 'localhost',\n      port: parseInt(process.env.DB_PORT || '5432', 10),\n    });\n\n    const dbName = process.env.DB_NAME || 'user_service';\n\n    try {\n      await client.connect();\n      const res = await client.query(\n        `SELECT 1 FROM pg_database WHERE datname = $1`,\n        [dbName]\n      );\n\n      if (res.rowCount === 0) {\n        await client.query(`CREATE DATABASE ${dbName}`);\n        console.log(`Database \"${dbName}\" đã được tạo thành công!`);\n      } else {\n        console.log(`Database \"${dbName}\" đã tồn tại.`);\n      }\n    } catch (error) {\n      console.error('Lỗi khi kiểm tra/tạo database:', error);\n    } finally {\n      await client.end();\n    }\n  }\n  async seedDatabase() {\n    // Kiem tra xem co du lieu chua, neu chua thi tao du lieu mau\n    const existingUsers = await this.userRepository.find();\n    if (existingUsers.length > 0) {\n      console.log('Database already seeded.');\n      return;\n    }\n    const zero = 0;\n    const hashedPassword = await bcrypt.hash(\"password123\", 10);\n    //tao 10 du lieu mau\n    const sampleUsers = [\n      { username: 'Alice', email: 'alice@example.com', password: hashedPassword, role: 'user', partner_id: zero , isActive: true },\n      { username: 'Bob', email: 'bob@example.com', password: hashedPassword, role: 'admin', partner_id: zero, isActive: true },\n      { username: 'Charlie', email: 'charlie@example.com', password: hashedPassword, role: 'partner', partner_id:1001, isActive: false },\n      { username: 'Daisy', email: 'daisy@example.com', password: hashedPassword, role: 'user', partner_id: zero, isActive: true },\n      { username: 'Edward', email: 'edward@example.com', password: hashedPassword, role: 'user', partner_id: zero , isActive: true },\n      { username: 'Fiona', email: 'fiona@example.com', password: hashedPassword, role: 'partner', partner_id: 1001, isActive: true },\n      { username: 'George', email: 'george@example.com', password: hashedPassword, role: 'user', partner_id: zero, isActive: true },\n      { username: 'Hannah', email: 'hannah@example.com', password: hashedPassword, role: 'user', partner_id: zero, isActive: true },\n      { username: 'Ivan', email: 'ivan@example.com', password: hashedPassword, role: 'partner', partner_id: 1002, isActive: false },\n      { username: 'Julia', email: 'julia@example.com', password: hashedPassword, role: 'user', partner_id: zero, isActive: true },\n    ];\n    await this.userRepository.save(sampleUsers);\n    console.log('Database seeded with 10 sample users.');\n  }\n\n  //mount\n  async onApplicationBootstrap() {\n    await this.checkDatabase();\n    await this.seedDatabase();\n  }\n}\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/JwtAuthGuard.html":{"url":"guards/JwtAuthGuard.html","title":"guard - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/jwt-auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, dbService: DatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dbService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, ForbiddenException, BadRequestException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\nimport { DatabaseService } from 'src/database/database.service';\nrequire('dotenv').config();\n@Injectable()\nexport class JwtAuthGuard implements CanActivate {\n    constructor(private jwtService: JwtService, private dbService: DatabaseService) { };\n    async canActivate(\n        context: ExecutionContext,\n    ): Promise {\n        const request = context.switchToHttp().getRequest();\n        try {\n             //get token\n        const token = request.headers.authorization.split(' ')[1];\n        // console.log(\"jwt auth guard: token = \", token)\n        if (!token) {\n            throw new ForbiddenException('Please provide access token');\n        }\n        // verify token\n        const payload = await this.jwtService.verifyAsync(token, {\n            secret: process.env.JWT_KEY,\n        })\n        // console.log(\"jwt auth guard: payload = \", payload)\n\n        //\n        const user = await this.dbService.findByUserID(payload.id);\n        if (!user) {\n            throw new BadRequestException(\"User not belong to token!\")\n        }\n        // console.log(\"jwt auth guard: user = \", user)\n        const { password,isActive, ...userWithoutPassword }=user;\n        //bind user to request\n        request.user = userWithoutPassword;\n        } catch (error) {\n            throw new ForbiddenException('Invalid token or expired')\n        }\n        return true;\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: UserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UserDTO } from 'src/DTO';\nrequire('dotenv').config();\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_KEY,\n    });\n  }\n\n  async validate(payload: UserDTO) {\n     const user ={ id: payload.id, username: payload.username, email: payload.email, role: payload.role};\n     console.log(\"1\");\n     return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/roles.guards.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(roles: string[])\n                    \n                \n                        \n                            \n                                Defined in src/roles.guards.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roles\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles.guards.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, ForbiddenException, BadRequestException } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nrequire('dotenv').config();\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor(private roles: string[] ){};\n    async canActivate(\n        context: ExecutionContext,\n    ): Promise {\n        const request = context.switchToHttp().getRequest();\n        return this.roles.includes(request.user.role.toLowerCase());\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                partner_id\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        partner_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({unique: true})\n  username: string;\n\n  @Column({ unique: true, nullable: true  })\n  email: string;\n\n  @Column()\n  password: string;\n\n  @Column({ default: 'user' })\n  role: string; // 'user', 'partner', 'admin'\n\n  @Column({default: 0})\n  partner_id: number; \n\n  @Column({ default: true })\n  isActive: boolean;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                editProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                editUser\n                            \n                            \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getList\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    Async\n                                getUser\n                            \n                            \n                                    \n                                    Async\n                                getUserPartnerID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(password: string, newPassword: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put('/change-password')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        editProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    editProfile(newUsername: string, newEmail: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put('/edit-profile')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newUsername\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUser(id: number, newUsername: string, newEmail: string, newRole: string, newPartnerid, newIsActive: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(new RolesGuard())@UseGuards(JwtAuthGuard)@Put('/edit-user')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newUsername\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newRole\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPartnerid\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newIsActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(new RolesGuard())@UseGuards(JwtAuthGuard)@Get('/list')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('/profile')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserPartnerID\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserPartnerID(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('partner_id/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { \n  Controller, \n  UseGuards, \n  Get, \n  Post, \n  Put, \n  Body, \n  Param, \n  Req, \n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { RolesGuard } from 'src/roles.guards';\n\n\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  //// Admin-only\n  // get user list\n  @UseGuards(new RolesGuard(['admin']))\n  @UseGuards(JwtAuthGuard)\n  @Get('/list')\n  async getList(){\n    return this.userService.getAllUser();\n  } \n  //manage user information (username, email,role,active status)\n  @UseGuards(new RolesGuard(['admin']))\n  @UseGuards(JwtAuthGuard)\n  @Put('/edit-user')\n  async editUser(\n    @Body('id') id: number,\n    @Body('username') newUsername: string,\n    @Body('email') newEmail: string,\n    @Body('role') newRole: string,\n    @Body('partner_id') newPartnerid,\n    @Body('isActive') newIsActive: boolean,\n  ) {\n\n    return this.userService.editUserProfile(id,newUsername, newEmail, newRole, newPartnerid, newIsActive);\n  }\n\n\n  //change password\n  @UseGuards(JwtAuthGuard)\n  @Put('/change-password')\n  async changePassword(\n    @Body('password') password: string,\n    @Body('newPassword') newPassword: string,\n    @Req() req: any,\n  ) {\n    return this.userService.changePassword(req.user.id, password, newPassword);\n  }\n  //edit profile (username, email)\n  @UseGuards(JwtAuthGuard)\n  @Put('/edit-profile')\n  async editProfile(\n    @Body('username') newUsername: string,\n    @Body('email') newEmail: string,\n    @Req() req: any,\n  ) {\n    return this.userService.editProfile(req.user.id,newUsername, newEmail);\n  }\n  //user get their own profile\n  @UseGuards(JwtAuthGuard)\n  @Get('/profile')\n  async getProfile( @Req() req: any,){\n    return this.userService.getUserProfile(req.user.id)\n  }\n\n  //// API (temp)\n  //get all users information\n  @Get('/')\n  async getAll(){\n    return this.userService.getAllUser();\n  }\n  // get information of a specific user\n  @Get('/:id')\n  async getUser(@Param('id') id: number){\n    return this.userService.getUserInfo(id);\n  }\n\n  @Get('partner_id/:id')\n  async getUserPartnerID(@Param('id') id: number){\n    return this.userService.getUserPartnerID(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDTO.html":{"url":"classes/UserDTO.html","title":"class - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/DTO/userDTO.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                role\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number, username: string, email: string, role: string)\n                    \n                \n                        \n                            \n                                Defined in src/DTO/userDTO.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        role\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/userDTO.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/userDTO.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/userDTO.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DTO/userDTO.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserDTO{\n    id: number\n    username: string\n    email: string\n    role: string\n    constructor(id: number, username: string, email: string, role: string) {\n        this.id = id;\n        this.username = username;\n        this.email = email;\n        this.role = role;\n      }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUserModule -->\n\nJwtStrategy->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { User } from './user.entity';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from 'src/auth/jwt.strategy';\nrequire('dotenv').config();\n@Module({\n  imports: [DatabaseModule, JwtModule.register({\n    secret: process.env.JWT_KEY, // .env\n    signOptions: { expiresIn: '1h' },\n  }), TypeOrmModule.forFeature([User])],\n  providers: [UserService, JwtStrategy],\n  controllers: [UserController],\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                editProfile\n                            \n                            \n                                    Async\n                                editUserProfile\n                            \n                            \n                                    Async\n                                getAllUser\n                            \n                            \n                                    Async\n                                getUserInfo\n                            \n                            \n                                    Async\n                                getUserPartnerID\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dbService: DatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dbService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: number, oldPassword: string, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                oldPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    editProfile(userId: number, newUsername: string, newEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newUsername\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUserProfile(userId: number, newUsername: string, newEmail: string, newRole: string, newPartnerid: number, newIsActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newUsername\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newRole\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPartnerid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newIsActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserInfo(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserPartnerID\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserPartnerID(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException, NotFoundException } from '@nestjs/common';\nimport { DatabaseService } from 'src/database/database.service';\nimport * as bcrypt from 'bcryptjs';\n\n@Injectable()\nexport class UserService {\n\n\n  constructor(\n    private readonly dbService: DatabaseService,\n  ) { }\n  //all roles(admin,partner,user)\n  async changePassword(userId: number, oldPassword: string, newPassword: string) {\n    const user = await this.dbService.findByUserID(userId);\n    if (!user) {\n      throw new NotFoundException('User not found.');\n    }\n\n    const isPasswordValid = await bcrypt.compare(oldPassword, user.password);\n    if (!isPasswordValid) {\n      throw new BadRequestException('Your password is incorrect.');\n    }\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    const res = await this.dbService.update(userId, { password: hashedPassword });\n    return res;\n  }\n  async editProfile(userId: number, newUsername: string, newEmail: string) {\n    const user = await this.dbService.findByUserID(userId);\n    if (!user) {\n      throw new NotFoundException('User not found.');\n    }\n    const existingUser = await this.dbService.findByUsername(newUsername);\n    if (existingUser && user.id !== existingUser.id) {\n      throw new BadRequestException('Username is already taken.');\n    }\n    const existingEmail = await this.dbService.findByEmail(newEmail);\n    if (existingEmail && user.id !== existingEmail.id) {\n      throw new BadRequestException('Email is already in use.');\n    }\n    return this.dbService.update(userId, { username: newUsername, email: newEmail });\n  }\n  async getUserProfile(userId: number) {\n    const user = await this.dbService.findByUserID(userId);\n    if (!user) {\n      throw new NotFoundException('User not found.');\n    }\n    if(user.role != \"partner\") {\n      const { password, isActive, partner_id, ...data } = user;\n      return data;\n    }\n    else {\n      const { password, isActive, ...data } = user;\n      return data;\n    }\n\n  }\n  //admin\n  async editUserProfile(userId: number, newUsername: string, newEmail: string, newRole: string, newPartnerid: number, newIsActive: boolean) {\n    const user = await this.dbService.findByUserID(userId);\n    if (!user) {\n      throw new NotFoundException('User not found.');\n    }\n    const existingUser = await this.dbService.findByUsername(newUsername);\n    if (existingUser && user.id != existingUser.id) {\n      throw new BadRequestException('Username is already taken.');\n    }\n    const existingEmail = await this.dbService.findByEmail(newEmail);\n    if (existingEmail && user.id != existingEmail.id) {\n      throw new BadRequestException('Email is already in use.');\n    }\n\n    if (!['admin', 'user', 'partner'].includes(newRole)) {\n      throw new Error('Invalid role');\n    }\n    return this.dbService.update(userId, { username: newUsername, email: newEmail, isActive: newIsActive, partner_id: newPartnerid,role: newRole });\n  }\n  async getUserInfo(userId: number) {\n    const data = await this.dbService.findByUserID(userId);\n    if (!data) {\n      throw new NotFoundException('User not found.');\n    }\n    const { password, ...user } = data;\n    return user;\n  }\n  async getUserPartnerID(id: number) {\n    const data = await this.dbService.findByUserID(id);\n    if (!data) {\n      throw new NotFoundException('User not found.');\n    }\n    if (data.role != \"partner\"){\n      return {partner_id: 0};\n    }\n    return {partner_id: data.partner_id};\n  }\n\n  async getAllUser() {\n    try {\n      const data = await this.dbService.findAll();\n      const Users = data.map(({ password, ...rest }) => rest);\n      return Users;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      throw new Error('Unable to fetch users at this time.');\n    }\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/DTO/authDTO.ts\n            \n            class\n            AuthDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/DTO/userDTO.ts\n            \n            class\n            UserDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            guard\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/database.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles.guards.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/serve-static : ^4.0.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.4.7\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 Partner\n                            \n                        \n                        \n                            \n                                Value : partner\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\n###[Nest] User service of VOU system\n\nProject setup\n1/ install packages\nExample :$ npm install2/ create your .env from .env.example\nExample :HOST = localhost \nPORT = 5000 \nDB_HOST=postgres \nDB_PORT=5432\nDB_USERNAME=your_username\nDB_PASSWORD=your_password\nDB_NAME=user_service\nJWT_KEY = your_JWT_key // ex:d@qL0qG+J8mKz!Rz2X9tLZ!$2#Tz8P4fTsX7YwWZ!8yGh3/ This service using postgresSQL. If you use another database, modify in file database/database.module.ts or setup a docker/cloud service\n4/ Compile and run the project\n5/ Docker edit .env\nExample :HOST = localhost \nPORT = 5000 //(optional)\nDB_HOST=postgres // your database host (match with docker-compose.yml database)\nDB_PORT=5432 //(optional)\nDB_USERNAME=your_username //(optional)\nDB_PASSWORD=your_password //(optional)\nDB_NAME=user_service //(optional)Example :# development\n$ npm run build\n\n# production mode\n$ npm start\n\n# docker\ndocker-compose up --build\nAPIs:\nAPP:\n\n\n\nSTT\nMethod\nURL\nFunctionality\nNote\n\n\n\n\n1\nGET\n/\nDocumentation\n\n\n\n\nAUTH:\n\n\n\nSTT\nMethod\nURL\nFunctionality\nNote\n\n\n\n\n1\nPOST\nauth/register\nuser register account\n\n\n\n2\nPOST\nauth/login\nuser login\n\n\n\n3\nPOST\nauth/profile\ncheck profile\ndisabled, replaced with user/profile\n\n\n\nUSER_API:\n\n\n\nSTT\nMethod\nURL\nFunctionality\nNote\n\n\n\n\n1\nGET\nuser/\nget all users information\nno permission req\n\n\n2\nGET\nuser/:id\nget a specific user information\nno permission req\n\n\n3\nGET\nuser/partner_id/:id\nget user partner_id\nno permission req. role != partner => 0\n\n\n\nUSER:\n\n\n\nSTT\nMethod\nURL\nFunctionality\nNote\n\n\n\n\n1\nGET\nuser/profile\nget user own profile\nreq: login. role=partner =>partner_id\n\n\n2\nPUT\nuser/edit-profile\nuser edit their information\nreq: login\n\n\n3\nPUT\nuser/change-password\nuser change their password\nreq: login\n\n\n4\nGET\nuser/list\nget user detail informations\nreq: login as admin\n\n\n5\nPUT\nuser/edit-user\nedit user information except password\nreq: login as admin, included role & isActive\n\n\n\nTASKS LIST:\n\n Database.\n create user module & routes.\n User entity.\n create auth module & routes.\n DTOs\n Authentication. (jwt)\n Authorization. (admin,partner,user)\n Finish UserModule.\n Document\n Admin FrontEnd\n API module -> included in User\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nDatabaseService \n\nDatabaseService \n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\nUserModule -->\n\nJwtStrategy->UserModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.1\n        \n            Description : user service of VOU system\n        \n            License : UNLICENSED\n        \n            Author : Nguyen Dinh Nam Thuan\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
